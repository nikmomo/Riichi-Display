<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WampSharp</name>
    </assembly>
    <members>
        <member name="T:WampSharp.Logging.ILog">
            <summary>
                Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:WampSharp.Logging.ILog.Log(WampSharp.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
                Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
                Note to implementers: the message func should not be called if the loglevel is not enabled
                so as not to incur performance penalties.
                To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:WampSharp.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:WampSharp.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:WampSharp.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:WampSharp.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:WampSharp.Logging.ILogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:WampSharp.Logging.LogLevel">
            <summary>
                The log level.
            </summary>
        </member>
        <member name="T:WampSharp.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:WampSharp.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="M:WampSharp.Logging.LogProvider.SetCurrentLogProvider(WampSharp.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:WampSharp.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WampSharp.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:WampSharp.Logging.LogProvider.SetCurrentLogProvider(WampSharp.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:WampSharp.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:WampSharp.Logging.ILog"/></returns>
        </member>
        <member name="M:WampSharp.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:WampSharp.Logging.ILog"/></returns>
        </member>
        <member name="M:WampSharp.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:WampSharp.Logging.ILog"/></returns>
        </member>
        <member name="M:WampSharp.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:WampSharp.Logging.ILog"/></returns>
        </member>
        <member name="M:WampSharp.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:WampSharp.Logging.LogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">A optional paramater to indicate message should be destructured.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:WampSharp.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
                Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured
                data in a format string:
                For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't
                know if serilog is actually
                used. So, this class simulates that. it will replace any text in {curly braces} with an index number.
                "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular
                .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:WampSharp.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
                The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:WampSharp.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
                Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
                <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WampSharp.Core.Client.IWampServerProxyBuilder`3">
            <summary>
            Builds a WAMP server proxy.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRawClient"></typeparam>
            <typeparam name="TServer"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Client.IWampServerProxyBuilder`3.Create(`1,WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Creates a WAMP server proxy based on the given connection
            which its callbacks will be handled by the given client.
            </summary>
            <param name="client">The given client which will handle server
            callbacks.</param>
            <param name="connection">The connection the proxy is based on.</param>
            <returns>A proxy to the server.</returns>
        </member>
        <member name="T:WampSharp.Core.Client.IWampServerProxyIncomingMessageHandlerBuilder`2">
            <summary>
            Builds an <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRawClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Client.IWampServerProxyIncomingMessageHandlerBuilder`2.Build(`1,WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Creates an <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/>
            that will use <paramref name="client"/> in order to handle incoming callbacks.
            </summary>
            <param name="client">The client that will be used in order to handle incoming callbacks.</param>
            <param name="connection">Not sure why this is here.</param>
            <returns>The built <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`1"/>.</returns>
        </member>
        <member name="T:WampSharp.Core.Client.IWampServerProxyOutgoingMessageHandlerBuilder`2">
            <summary>
            Creates a <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/> that will
            send messages to a WAMP server.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRawClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Client.IWampServerProxyOutgoingMessageHandlerBuilder`2.Build(`1,WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Builds a <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/> that
            will send messages using the given <paramref name="connection"/>
            and get callbacks through the given <paramref name="client"/>.
            </summary>
            <param name="client">The client to receive callbacks from server through.</param>
            <param name="connection">The connection to send messages through.</param>
            <returns>The built <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/>.</returns>
        </member>
        <member name="T:WampSharp.Core.Client.WampServerProxyHandler`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/>
            that sends <see cref="T:WampSharp.Core.Message.WampMessage`1"/> to a given
            <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/> and receives from that connection
            messages which are handled by an <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/>
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Client.WampServerProxyHandler`1.#ctor(WampSharp.Core.Listener.IWampConnection{`0},WampSharp.Core.Dispatch.IWampIncomingMessageHandler{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Client.WampServerProxyHandler`1"/>.
            </summary>
            <param name="connection">The connection used to send and receieve <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.</param>
            <param name="incomingHandler">The handler used to handle incoming messages.</param>
        </member>
        <member name="T:WampSharp.Core.Client.WampServerProxyIncomingMessageHandlerBuilder`2">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Client.IWampServerProxyIncomingMessageHandlerBuilder`2"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRawClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Client.WampServerProxyIncomingMessageHandlerBuilder`2.#ctor(WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Client.WampServerProxyIncomingMessageHandlerBuilder`2"/>.
            </summary>
            <param name="formatter">A <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/> used
            in order to deserialize requests.</param>
        </member>
        <member name="T:WampSharp.Core.Client.WampServerProxyOutgoingMessageHandlerBuilder`2">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Client.IWampServerProxyOutgoingMessageHandlerBuilder`2"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRawClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Client.WampServerProxyOutgoingMessageHandlerBuilder`2.#ctor(WampSharp.Core.Client.IWampServerProxyIncomingMessageHandlerBuilder{`0,`1})">
            <summary>
            Creates an instance of <see cref="T:WampSharp.Core.Client.WampServerProxyOutgoingMessageHandlerBuilder`2"/>
            </summary>
            <param name="incomingHandlerBuilder">An <see cref="T:WampSharp.Core.Client.IWampServerProxyIncomingMessageHandlerBuilder`2"/>
            used in order to build incoming handler for callbacks.</param>
        </member>
        <member name="T:WampSharp.Core.Contracts.IWampMissingMethodContract`1">
            <summary>
            Handles messages that are not handled by other implemented interfaces
            of a given handler.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Contracts.IWampMissingMethodContract`1.Missing(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Occurs when a message isn't handled by any other interface
            method of the handler.
            </summary>
            <param name="rawMessage">The message.</param>
        </member>
        <member name="T:WampSharp.Core.Contracts.IWampMissingMethodContract`2">
            <summary>
            Handles messages that are not handled by other implemented interfaces
            of a given handler.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Contracts.IWampMissingMethodContract`2.Missing(`1,WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Occurs when a message isn't handled by any other interface
            method of the handler.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="rawMessage">The message.</param>
        </member>
        <member name="T:WampSharp.Core.Contracts.WampHandlerAttribute">
            <summary>
            Indicates that a method treats a specific <see cref="T:WampSharp.Core.Message.WampMessageType"/>.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Contracts.WampHandlerAttribute.#ctor(WampSharp.Core.Message.WampMessageType)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.Core.Contracts.WampHandlerAttribute"/>
            with the given <see cref="P:WampSharp.Core.Contracts.WampHandlerAttribute.MessageType"/>.
            </summary>
            <param name="messageType">The <see cref="T:WampSharp.Core.Message.WampMessageType"/> this
            method handles</param>
        </member>
        <member name="P:WampSharp.Core.Contracts.WampHandlerAttribute.MessageType">
            <summary>
            Gets the <see cref="T:WampSharp.Core.Message.WampMessageType"/> this method handles.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Contracts.WampProxyParameterAttribute">
            <summary>
            Indicates that a given parameter of a <see cref="T:WampSharp.Core.Contracts.WampHandlerAttribute"/> method 
            is a proxy to a WAMP contract.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Contracts.WampRawHandlerAttribute">
            <summary>
            Indicates a method handles raw <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Cra.IWampCraChallenge">
            <summary>
            Represents details of a WAMP-CRA challenge.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Cra.IWampCraChallenge.Salt">
            <summary>
            Gets the salt to use in order to compute the signature, sent to the user that upon CHALLENGE
            message. (in challenge.extra)
            </summary>
        </member>
        <member name="P:WampSharp.Core.Cra.IWampCraChallenge.Iterations">
            <summary>
            Gets the number of iterations to use in order to compute the signature, 
            sent to the user that upon CHALLENGE
            message. (in challenge.extra)
            </summary>
        </member>
        <member name="P:WampSharp.Core.Cra.IWampCraChallenge.KeyLength">
            <summary>
            Gets the keylength to use in order to compute the signature, 
            sent to the user that upon CHALLENGE
            message. (in challenge.extra)
            </summary>
        </member>
        <member name="T:WampSharp.Core.Cra.WampCraHelpers">
            <summary>
            WAMP-CRA Authentication Helper methods.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Cra.WampCraHelpers.DeriveKey(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Computes a derived cryptographic key from a password according to PBKDF2
            http://en.wikipedia.org/wiki/PBKDF2. The function will only return a derived key
            if at least 'salt' is present in the 'extra' dictionary. The complete set of
            attributes that can be set in 'extra': 
               salt: The salt value to be used.
               iterations: Number of iterations of derivation algorithm to run. 
               keylen: Key length to derive.
            </summary>
            <param name="secret">The secret key from which to derive. </param>
            <param name="extra"> Extra data for salting the secret. Possible key values 'salt'
            (required, otherwise returns @secret), 'iterations' (1000 default),
            and/or 'keylen' (32 default). </param>
            <returns>A derived key (Base64 encoded) if a salt is provided in the extra parameter, or the
            value of parameter 'secret' if not.</returns>
        </member>
        <member name="M:WampSharp.Core.Cra.WampCraHelpers.DeriveKey(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Computes a derived cryptographic key from a password according to PBKDF2
            http://en.wikipedia.org/wiki/PBKDF2. The function will only return a derived key
            if at least 'salt' is present in the 'extra' dictionary. The complete set of
            attributes that can be set in 'extra': 
               salt: The salt value to be used.
               iterations: Number of iterations of derivation algorithm to run. 
               keylen: Key length to derive.
            </summary>
            <param name="secret">The secret key from which to derive. </param>
            <param name="salt"></param>
            <param name="iterations"></param>
            <param name="keyLen"></param>
            <returns>A derived key (Base64 encoded) if a salt is provided in the extra parameter, or the
            value of parameter 'secret' if not.</returns>
        </member>
        <member name="M:WampSharp.Core.Cra.WampCraHelpers.AuthSignature(System.String,System.String,WampSharp.Core.Cra.IWampCraChallenge)">
            <summary>
            Compute the authentication signature from an authentication challenge and a secret.
            </summary>
            <param name="authChallenge">The authentication challenge. </param>
            <param name="authSecret">The authentication secret. </param>
            <param name="challenge">Extra data for salting the secret.</param>
            <returns>The authentication signature.</returns>
        </member>
        <member name="M:WampSharp.Core.Cra.WampCraHelpers.AuthSignature(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Compute the authentication signature from an authentication challenge and a secret.
            </summary>
            <param name="authChallenge">The authentication challenge. </param>
            <param name="authSecret">The authentication secret. </param>
            <param name="authExtra">Extra data for salting the secret. Possible key values 'salt'
            (required, otherwise uses @authSecret), 'iterations' (1000
            default), and/or 'keylen' (32 default). </param>
            <returns>The authentication signature.</returns>
        </member>
        <member name="M:WampSharp.Core.Cra.WampCraHelpers.PBKDF2Sha256GetBytes(System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Implements PBKDF2 functionality by using a pseudorandom number generator based on
            HMACSHA256.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when one or more arguments are outside
            the required range.
             </exception>
            <param name="dklen">The number of pseudo-random key bytes to generate. </param>
            <param name="password">The password used to derive the key. After use, the password
            and salt should be cleared (with Array.Clear) </param>
            <param name="salt">The key salt used to derive the key. After use, the password
            and salt should be cleared (with Array.Clear) </param>
            <param name="iterationCount">The number of iterations for the operation. The iteration
            count should be as high as possible without causing
            unreasonable delay. </param>
            <returns>A byte array filled with pseudo-random key bytes.</returns>
        </member>
        <member name="M:WampSharp.Core.Cra.WampCraHelpers.Sign(System.String,System.String)">
            <summary>
            Signs a challenge with a given authentication key.
            </summary>
            <param name="authenticationKey"></param>
            <param name="challenge"></param>
            <returns>The signed challenge.</returns>
        </member>
        <member name="T:WampSharp.Core.Dispatch.Handler.IMethodBuilder`2">
            <summary>
            Builds a method by a given key.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TMethod"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Dispatch.Handler.IMethodBuilder`2.BuildMethod(`0)">
            <summary>
            Builds a method by a given key.
            </summary>
            <returns>A delegate to the given method.</returns>
        </member>
        <member name="T:WampSharp.Core.Dispatch.Handler.IWampRequestMapper`1">
            <summary>
            Maps WAMP requests to their corresponding method.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Dispatch.Handler.IWampRequestMapper`1.Map(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Maps the given WAMP request to its corresponding method.
            </summary>
            <param name="request">The given WAMP request.</param>
            <returns>The given request's corresponding method.</returns>
        </member>
        <member name="T:WampSharp.Core.Dispatch.Handler.WampMethodBuilder`2">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Dispatch.Handler.IMethodBuilder`2"/>.
            Builds efficient delegates using compiled expressions.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Dispatch.Handler.WampMethodBuilder`2.#ctor(System.Object,WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Dispatch.Handler.WampMethodBuilder`2"/>.
            </summary>
            <param name="instance">The instance to call its methods.</param>
            <param name="formatter">The <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/> used to convert the arguments.</param>
        </member>
        <member name="T:WampSharp.Core.Dispatch.Handler.WampMethodInfo">
            <summary>
            Represents a structure that contains information about a
            <see cref="T:WampSharp.Core.Contracts.WampHandlerAttribute"/> method.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Dispatch.Handler.WampMethodInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a new <see cref="T:WampSharp.Core.Dispatch.Handler.WampMethodInfo"/> given a
            <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="method">The given method to obtain information
            from.</param>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.Method">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> this method represents.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.ArgumentsCount">
            <summary>
            Gets the number of arguments this method gets, not including
            <see cref="T:WampSharp.Core.Contracts.WampProxyParameterAttribute"/> parameter.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.HasWampClientArgument">
            <summary>
            Returns a value indicating whether this method gets a
            <see cref="T:WampSharp.Core.Contracts.WampProxyParameterAttribute"/> parameter.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.HasParamsArgument">
            <summary>
            Returns a value indicating whether this method has a params
            argument.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.IsRawMethod">
            <summary>
            Returns a value indicating whether this method receives the given
            <see cref="T:WampSharp.Core.Message.WampMessage`1"/> as is.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.Parameters">
            <summary>
            Gets this method's parameters.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.ParametersToConvert">
            <summary>
            Gets this method's parameters that require deserialization.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.TotalArgumentsCount">
            <summary>
            Gets the number of arguments of this method.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Dispatch.Handler.WampMethodInfo.MessageType">
            <summary>
            Gets the message type this method handles.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Dispatch.Handler.WampRequestMapper`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Dispatch.Handler.IWampRequestMapper`1"/> that
            maps requests to methods using <see cref="T:WampSharp.Core.Contracts.WampHandlerAttribute"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Dispatch.Handler.WampRequestMapper`1.#ctor(System.Type,WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.Core.Dispatch.Handler.WampRequestMapper`1"/>
            </summary>
            <param name="type">The type to map WAMP requests its methods.</param>
            <param name="formatter">A <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/> used
            to check if a parameter can be binded to given type.</param>
        </member>
        <member name="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2">
            <summary>
            Handles incoming <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s receieved from clients.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
            <remarks>
            This should probably dispatch the given message to its corresponding
            method.
            </remarks>
        </member>
        <member name="M:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2.HandleMessage(`1,WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Handles a given incoming message from a given client.
            </summary>
            <param name="client">The client who sent the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`1">
            <summary>
            Handles <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`1.HandleMessage(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Handles a given incoming message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:WampSharp.Core.Dispatch.WampIncomingMessageHandler`2">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/>,
            <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`1"/> that dispatches
            <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s to their corresponding methods.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Dispatch.WampIncomingMessageHandler`2.#ctor(WampSharp.Core.Dispatch.Handler.IWampRequestMapper{`0},WampSharp.Core.Dispatch.Handler.IMethodBuilder{WampSharp.Core.Dispatch.Handler.WampMethodInfo,System.Action{`1,WampSharp.Core.Message.WampMessage{`0}}})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Dispatch.WampIncomingMessageHandler`2"/>
            given <paramref name="wampRequestMapper"/> and
            <paramref name="methodBuilder"/>
            </summary>
            <param name="wampRequestMapper">The <see cref="T:WampSharp.Core.Dispatch.Handler.IWampRequestMapper`1"/>
            used in order to map <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s to their suitable methods.</param>
            <param name="methodBuilder">The <see cref="T:WampSharp.Core.Dispatch.Handler.IMethodBuilder`2"/> used 
            in order to build the corresponding methods.</param>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampClientBuilder`2">
            <summary>
            Builds a proxy to a WAMP client given a <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampClientBuilder`2.Create(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Creates a proxy to a WAMP client by the given connection.
            </summary>
            <param name="connection">The connection to the client.</param>
            <returns>A proxy to the WAMP client.</returns>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampClientBuilderFactory`2">
            <summary>
            Builds a <see cref="T:WampSharp.Core.Listener.IWampClientBuilder`2"/> corresponding 
            for a given <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/>
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
            <remarks>
            This interface solves a problem that two objects are circular dependent
            in readonly fields.
            </remarks>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampClientBuilderFactory`2.GetClientBuilder(WampSharp.Core.Listener.IWampClientContainer{`0,`1})">
            <summary>
            Creates a <see cref="T:WampSharp.Core.Listener.IWampClientBuilder`2"/>
            given a <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/>.
            </summary>
            <param name="container">The given <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/>.</param>
            <returns>The created <see cref="T:WampSharp.Core.Listener.IWampClientBuilder`2"/>.</returns>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder`1">
            <summary>
            Builds an <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/>
            for a given connection.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder`1.Build(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Builds an <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/>
            for the given <paramref name="connection"/>.
            </summary>
            <param name="connection">The given connection.</param>
            <returns>The built <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/></returns>
        </member>
        <member name="T:WampSharp.Core.Listener.WampOutgoingMessageHandler`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/>
            that dispatches messages to an <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.WampOutgoingMessageHandler`1.#ctor(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Listener.WampOutgoingMessageHandler`1"/>
            using a given <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>
            </summary>
            <param name="connection">The given WAMP connection.</param>
        </member>
        <member name="T:WampSharp.Core.Listener.WampOutgoingMessageHandlerBuilder`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder`1"/>
            using <see cref="T:WampSharp.Core.Listener.WampOutgoingMessageHandler`1"/>
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampClientContainer`2">
            <summary>
            A container of client proxies.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampClientContainer`2.GetClient(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Gets a client proxy for the given <paramref name="connection"/>.
            </summary>
            <param name="connection">The given connection.</param>
            <returns>A client proxy.</returns>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampClientContainer`2.GetAllClients">
            <summary>
            Returns all clients currently registered in the container.
            </summary>
            <returns>An enumerable of clients currently present in the container.</returns>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampClientContainer`2.RemoveClient(WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Removes a client from the container given its connection.
            </summary>
            <param name="connection">The given client's connection.</param>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampClientContainer`2.TryGetClient(WampSharp.Core.Listener.IWampConnection{`0},`1@)">
            <summary>
            Gets a client proxy for the given <paramref name="connection"/> if it
            is present.
            </summary>
            <param name="connection">The given connection.</param>
            <param name="client">The requested client.</param>
            <returns>A value indicating whether the client was resolved successfully.</returns>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampClientContainer`2.GenerateClientId(`1)">
            <summary>
            Generates a client id.
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:WampSharp.Core.Listener.WampClientContainer`2">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.WampClientContainer`2.#ctor(WampSharp.Core.Listener.IWampClientBuilderFactory{`0,`1})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Listener.WampClientContainer`2"/>
            using a client builder that is activated using the given 
            <paramref name="clientBuilderFactory"/> and this container.
            </summary>
            <param name="clientBuilderFactory">The given <see cref="T:WampSharp.Core.Listener.IWampClientBuilderFactory`2"/>.</param>
        </member>
        <member name="T:WampSharp.Core.Listener.WampClientContainerDisposable`2">
            <summary>
            An <see cref="T:System.IDisposable"/> that is used as a mixin for implementing
            <see cref="T:System.IDisposable"/> for generated proxies.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.WampClientContainerDisposable`2.#ctor(WampSharp.Core.Listener.IWampClientContainer{`0,`1},WampSharp.Core.Listener.IWampConnection{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.Core.Listener.WampClientContainerDisposable`2"/>.
            </summary>
            <param name="container">The container that contains the client proxy.</param>
            <param name="connection">The connection of the client.</param>
        </member>
        <member name="T:WampSharp.Core.Listener.IControlledWampConnection`1">
            <summary>
            Represents a <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/> that its state
            can be controlled.
            </summary>
            <remarks>
            This interface was created in order to apply client side connection
            capabilites.
            </remarks>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.IControlledWampConnection`1.Connect">
            <summary>
            Tries to establish a connection to the remote server.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Listener.IDetailedWampConnection`1">
            <summary>
            Represents a WAMP bi-directional connection with transport details.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:WampSharp.Core.Listener.IDetailedWampConnection`1.TransportDetails">
            <summary>
            Gets the transport details associated with this connection.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampConnection`1">
            <summary>
            Represents a WAMP bi-directional connection.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.IWampConnection`1.Send(WampSharp.Core.Message.WampMessage{System.Object})">
            <summary>
            Sends a given message through the wire.
            </summary>
            <param name="message">The given message.</param>
        </member>
        <member name="E:WampSharp.Core.Listener.IWampConnection`1.ConnectionOpen">
            <summary>
            Occurs when this connection opens.
            </summary>
        </member>
        <member name="E:WampSharp.Core.Listener.IWampConnection`1.MessageArrived">
            <summary>
            Occurs when a message arrives.
            </summary>
        </member>
        <member name="E:WampSharp.Core.Listener.IWampConnection`1.ConnectionClosed">
            <summary>
            Occurs when this connection closes.
            </summary>
        </member>
        <member name="E:WampSharp.Core.Listener.IWampConnection`1.ConnectionError">
            <summary>
            Occurs when this connection occurs an error.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampConnectionListener`1">
            <summary>
            Represents a <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/> listener.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.Core.Listener.IWampConnectionMonitor">
            <summary>
            Allows getting notified when a WAMP client gets disconnected.
            </summary>
        </member>
        <member name="E:WampSharp.Core.Listener.IWampConnectionMonitor.ConnectionClosed">
            <summary>
            Occurs when a connection is closed.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Listener.IWampConnectionMonitor.Connected">
            <summary>
            Returns a value indicating whether the client is still connected.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Listener.WampConnectionErrorEventArgs">
            <summary>
            Represents error <see cref="T:System.EventArgs"/>.
            </summary>
            <remarks>
            Used for <see cref="E:WampSharp.Core.Listener.IWampConnection`1.ConnectionError"/>;
            </remarks>
        </member>
        <member name="M:WampSharp.Core.Listener.WampConnectionErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes an new instance of <see cref="T:WampSharp.Core.Listener.WampConnectionErrorEventArgs"/>.
            </summary>
            <param name="exception">The exception that describes this error.</param>
        </member>
        <member name="P:WampSharp.Core.Listener.WampConnectionErrorEventArgs.Exception">
            <summary>
            Gets the exception that represents the error.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Listener.WampConnectionMonitor`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampConnectionMonitor"/> used
            as a mixin in <see cref="T:WampSharp.Core.Listener.IWampClientBuilder`2"/>
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.Core.Listener.WampMessageArrivedEventArgs`1">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for an incoming message.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <remarks>
            Used for <see cref="E:WampSharp.Core.Listener.IWampConnection`1.MessageArrived"/>.
            </remarks>
        </member>
        <member name="M:WampSharp.Core.Listener.WampMessageArrivedEventArgs`1.#ctor(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.Core.Listener.WampMessageArrivedEventArgs`1"/>.
            </summary>
            <param name="message">The message </param>
        </member>
        <member name="P:WampSharp.Core.Listener.WampMessageArrivedEventArgs`1.Message">
            <summary>
            Gets the arrived message.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Listener.WampListener`2">
            <summary>
            Listens to <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>s, receives 
            <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s and dispatches them to a given <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Listener.WampListener`2.#ctor(WampSharp.Core.Listener.IWampConnectionListener{`0},WampSharp.Core.Dispatch.IWampIncomingMessageHandler{`0,`1},WampSharp.Core.Listener.IWampClientContainer{`0,`1})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.Core.Listener.WampListener`2"/>
            </summary>
            <param name="listener">The <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/> used in order to 
            accept incoming connections.</param>
            <param name="handler">The <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`2"/> used
            in order to dispatch incoming messages.</param>
            <param name="clientContainer">The <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/> use
            in order to store the connected clients.</param>
        </member>
        <member name="P:WampSharp.Core.Listener.WampListener`2.ClientContainer">
            <summary>
            The <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/>
            holding all current connected clients.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Listener.WampListener`2.Start">
            <summary>
            Starts listening for <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/>s.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Listener.WampListener`2.Stop">
            <summary>
            Stops the listener.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Message.WampMessageType">
            <summary>
            Represents message types defined by the WAMP protocl.
            </summary>
            <remarks>
            This enum comntains the message types of both WAMPv1 and WAMPv2.
            The reason for this is that it would be more complicated to build
            the framework if this is seperated into two enums.
            </remarks>
        </member>
        <member name="T:WampSharp.Core.Message.WampMessage`1">
            <summary>
            Represents a WAMP protocol message.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Message.WampMessage`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Message.WampMessage`1.#ctor(WampSharp.Core.Message.WampMessage{`0})">
            <summary>
            Copy constructor for inherited classes.
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:WampSharp.Core.Message.WampMessage`1.MessageType">
            <summary>
            Gets or sets the message type.
            </summary>
        </member>
        <member name="P:WampSharp.Core.Message.WampMessage`1.Arguments">
            <summary>
            Gets or sets the arguments of this message.
            </summary>
        </member>
        <member name="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler">
            <summary>
            Handles outgoing <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Proxy.IWampOutgoingMessageHandler.Handle(WampSharp.Core.Message.WampMessage{System.Object})">
            <summary>
            Handles a given outgoing <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.
            </summary>
            <param name="message">The given message.</param>
        </member>
        <member name="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer">
            <summary>
            Serializes method calls into <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer.SerializeRequest(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Serializes a method call into a <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.
            </summary>
            <param name="method">The method that was called.</param>
            <param name="arguments">The arguments of the call.</param>
            <returns>The serialized <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.</returns>
        </member>
        <member name="T:WampSharp.Core.Proxy.WampOutgoingRequestSerializer`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer"/>.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Proxy.WampOutgoingRequestSerializer`1.#ctor(WampSharp.Core.Serialization.IWampFormatter{`0})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.Core.Proxy.WampOutgoingRequestSerializer`1"/>.
            </summary>
            <param name="formatter">The <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/> to
            serialize arguments with.</param>
        </member>
        <member name="T:WampSharp.Core.Serialization.IWampFormatter`1">
            <summary>
            Represents a messages formatter
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.Core.Serialization.IWampFormatter`1.CanConvert(`0,System.Type)">
            <summary>
            Returns a value indicating whether the given argument
            can be deserialized to the given type.
            </summary>
            <param name="argument">The given argument.</param>
            <param name="type">The given type.</param>
            <returns>A value indicating whether the given argument
            can be casted to the given type.</returns>
        </member>
        <member name="M:WampSharp.Core.Serialization.IWampFormatter`1.Deserialize``1(`0)">
            <summary>
            Deserializes the given messages to the given type.
            </summary>
            <typeparam name="TTarget"></typeparam>
            <param name="message">The given message.</param>
            <returns>The deserialized message.</returns>
        </member>
        <member name="M:WampSharp.Core.Serialization.IWampFormatter`1.Deserialize(System.Type,`0)">
            <summary>
            Deserializes the given messages to the given type.
            </summary>
            <param name="type">The given type.</param>
            <param name="message">The given message.</param>
            <returns>The deserialized message.</returns>
        </member>
        <member name="M:WampSharp.Core.Serialization.IWampFormatter`1.Serialize(System.Object)">
            <summary>
            Serializes the given object to the message type.
            </summary>
            <param name="value">The given object.</param>
            <returns>The serialized message.</returns>
        </member>
        <member name="T:WampSharp.Core.Serialization.IWampMessageSerializerFactory">
            <summary>
            Represents a type capable of creating WAMP message serializers.
            </summary>
            <example>
            A WAMP message serializer is a class that looks implements an interface that 
            looks like this:
            
            public interface IMySerializer{TMessage}
            {
                [WampMessageHandler(WampMessageType.v1Event)]
                WampMessage{TMessage} Event(string topicUri, object @event);
            }
            
            It is used in order to avoid multiple messages serialization of
            message that are sent to multiple clients.
            </example>
        </member>
        <member name="M:WampSharp.Core.Serialization.IWampMessageSerializerFactory.GetSerializer``1">
            <summary>
            Creates a WAMP message serializer of a given type.
            </summary>
            <typeparam name="TProxy">The WAMP message serializer given type.</typeparam>
            <returns>The created WAMP message serializer.</returns>
        </member>
        <member name="T:WampSharp.Core.Utilities.GenericTypeExtensions">
            <summary>
            Contains extension methods of <see cref="T:System.Type"/> for 
            generic types.
            </summary>
        </member>
        <member name="M:WampSharp.Core.Utilities.GenericTypeExtensions.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            Returns a value indicating whether the given type
            can be converted to a generic version of the given open generic type.
            </summary>
            <param name="openGenericType">The given open generic type.</param>
            <param name="type">The given type.</param>
            <returns>A value indicating whether the given type
            can be converted to a generic version of the given open generic type.</returns>
        </member>
        <member name="M:WampSharp.Core.Utilities.GenericTypeExtensions.GetClosedGenericTypeImplementation(System.Type,System.Type)">
            <summary>
            Returns the closed generic type of the given generic open type,
            that the given type is assignable to.
            </summary>
            <param name="type">The given type.</param>
            <param name="openGenericType">The open generic type.</param>
            <returns>The closed generic type of the given generic open type,
            that the given type is assignable to.</returns>
        </member>
        <member name="M:WampSharp.Core.Utilities.TaskExtensions.UnwrapReturnType(System.Type)">
            <summary>
            Unwraps the return type of a given method.
            </summary>
            <param name="returnType">The given return type.</param>
            <returns>The unwrapped return type.</returns>
            <example>
            void, Task -> object
            Task{string} -> string
            int -> int
            </example>
        </member>
        <member name="M:WampSharp.Core.Utilities.TaskExtensions.CastTask(System.Threading.Tasks.Task)">
            <summary>
            Casts a <see cref="T:System.Threading.Tasks.Task"/> to a Task of type Task{object}.
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:WampSharp.Core.Utilities.TaskExtensions.CastTask``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Casts a <see cref="T:System.Threading.Tasks.Task`1"/> to a Task of type Task{object}.
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:WampSharp.Core.Utilities.TaskExtensions.ContinueWithNull(System.Threading.Tasks.Task)">
            <summary>
            Casts a <see cref="T:System.Threading.Tasks.Task`1"/> to a Task of type Task{object}.
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:WampSharp.V2.ICalleeProxyInterceptor">
            <summary>
            Represents an interface that allows to get involved in callee proxy call.
            </summary>
        </member>
        <member name="M:WampSharp.V2.ICalleeProxyInterceptor.GetCallOptions(System.Reflection.MethodInfo)">
            <summary>
            Gets the call options for a given method.
            </summary>
            <param name="method">The given method.</param>
            <returns>The call options for the given method.</returns>
        </member>
        <member name="M:WampSharp.V2.ICalleeProxyInterceptor.GetProcedureUri(System.Reflection.MethodInfo)">
            <summary>
            Gets the procedure uri for a given method.
            </summary>
            <param name="method">The given method.</param>
            <returns>The procedure uri for the given method.</returns>
        </member>
        <member name="T:WampSharp.V2.IWampChannel">
            <summary>
            Represents a WAMP client session.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampChannel.RealmProxy">
            <summary>
            Gets a proxy of the realm, this session is connected to.
            </summary>
        </member>
        <member name="M:WampSharp.V2.IWampChannel.Open">
            <summary>
            Tries to establish a connection to the WAMP router.
            </summary>
            <returns>A task that is complete when the connection is
            established.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampChannel.Close">
            <summary>
            Closes the session violently.
            </summary>
        </member>
        <member name="M:WampSharp.V2.IWampChannel.Close(System.String,WampSharp.V2.Core.Contracts.GoodbyeDetails)">
            <summary>
            Closes the session.
            </summary>
            <param name="reason">The close reason.</param>
            <param name="details">The close details.</param>
            <returns>A task that completes upon a GOODBYE message from the router.</returns>
        </member>
        <member name="T:WampSharp.V2.IWampChannelFactory">
            <summary>
            Represents a factory for <see cref="T:WampSharp.V2.IWampChannel"/>s.
            </summary>
        </member>
        <member name="M:WampSharp.V2.IWampChannelFactory.CreateChannel``1(System.String,WampSharp.Core.Listener.IControlledWampConnection{``0},WampSharp.V2.Binding.IWampBinding{``0})">
            <summary>
            Creates a <see cref="T:WampSharp.V2.IWampChannel"/> that connects to a given realm,
            using the given connection and the given binding.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="realm">The given realm to connect to.</param>
            <param name="connection">The connection to use to connect to the router.</param>
            <param name="binding">The binding to use to communicate with the router.</param>
            <returns></returns>
        </member>
        <member name="M:WampSharp.V2.IWampChannelFactory.CreateChannel``1(System.String,WampSharp.Core.Listener.IControlledWampConnection{``0},WampSharp.V2.Binding.IWampBinding{``0},WampSharp.V2.Client.IWampClientAuthenticator)">
            <summary>
            Creates a <see cref="T:WampSharp.V2.IWampChannel"/> that connects to a given realm,
            using the given connection and the given binding.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="realm">The given realm to connect to.</param>
            <param name="connection">The connection to use to connect to the router.</param>
            <param name="binding">The binding to use to communicate with the router.</param>
            <param name="authenticator">The authenticator object to handle CHALLENGE request.</param>
            <returns></returns>
        </member>
        <member name="M:WampSharp.V2.IWampChannelFactory.CreateChannel``1(System.String,System.Func{WampSharp.Core.Listener.IControlledWampConnection{``0}},WampSharp.V2.Binding.IWampBinding{``0})">
            <summary>
            Creates a <see cref="T:WampSharp.V2.IWampChannel"/> that connects to a given realm,
            using the given connection factory and the given binding.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="realm">The given realm to connect to.</param>
            <param name="connectionFactory">The factory to use to create a connection that will be used to connect to the router.</param>
            <param name="binding">The binding to use to communicate with the router.</param>
            <returns></returns>
        </member>
        <member name="M:WampSharp.V2.IWampChannelFactory.CreateChannel``1(System.String,System.Func{WampSharp.Core.Listener.IControlledWampConnection{``0}},WampSharp.V2.Binding.IWampBinding{``0},WampSharp.V2.Client.IWampClientAuthenticator)">
            <summary>
            Creates a <see cref="T:WampSharp.V2.IWampChannel"/> that connects to a given realm,
            using the given connection factory and the given binding.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="realm">The given realm to connect to.</param>
            <param name="connectionFactory">The factory to use to create a connection that will be used to connect to the router.</param>
            <param name="binding">The binding to use to communicate with the router.</param>
            <param name="authenticator">The authenticator object to handle CHALLENGE request.</param>
            <returns></returns>
        </member>
        <member name="T:WampSharp.V2.IPublisherRegistrationInterceptor">
            <summary>
            Represents an interface that allows to get involved in publisher registration.
            </summary>
        </member>
        <member name="M:WampSharp.V2.IPublisherRegistrationInterceptor.IsPublisherTopic(System.Reflection.EventInfo)">
            <summary>
            Returns a value indicating whether this event represents a publisher topic.
            </summary>
        </member>
        <member name="M:WampSharp.V2.IPublisherRegistrationInterceptor.GetPublishOptions(System.Reflection.EventInfo)">
            <summary>
            Gets the options that will be used to publish to the given event.
            </summary>
        </member>
        <member name="M:WampSharp.V2.IPublisherRegistrationInterceptor.GetTopicUri(System.Reflection.EventInfo)">
            <summary>
            Gets the topic uri that will be used to publish to the given event.
            </summary>
        </member>
        <member name="T:WampSharp.V2.ISubscriberRegistrationInterceptor">
            <summary>
            Represents an interface that allows to get involved in subscriber registration.
            </summary>
        </member>
        <member name="M:WampSharp.V2.ISubscriberRegistrationInterceptor.IsSubscriberHandler(System.Reflection.MethodInfo)">
            <summary>
            Returns a value indicating whether the given method is a
            topic event handler.
            </summary>
            <param name="method">The given method.</param>
        </member>
        <member name="M:WampSharp.V2.ISubscriberRegistrationInterceptor.GetTopicUri(System.Reflection.MethodInfo)">
            <summary>
            Returns the topic uri of the given topic event handler.
            </summary>
            <param name="method">The given topic event handler.</param>
        </member>
        <member name="M:WampSharp.V2.ISubscriberRegistrationInterceptor.GetSubscribeOptions(System.Reflection.MethodInfo)">
            <summary>
            Returns the <see cref="T:WampSharp.V2.Core.Contracts.SubscribeOptions"/> used to subscribe to the topic
            with the given topic event handler.
            </summary>
            <param name="method">The given topic event handler.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampCalleeError`1">
            <summary>
            Handles errors of <see cref="T:WampSharp.V2.Core.Contracts.IWampCallee"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCalleeError`1.RegisterError(System.Int64,`0,System.String)">
            <summary>
            Occurs when a REGISTER request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCalleeError`1.RegisterError(System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when a REGISTER request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCalleeError`1.RegisterError(System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when a REGISTER request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCalleeError`1.UnregisterError(System.Int64,`0,System.String)">
            <summary>
            Occurs when an UNREGISTER request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCalleeError`1.UnregisterError(System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when an UNREGISTER request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCalleeError`1.UnregisterError(System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when an UNREGISTER request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampCallerError`1">
            <summary>
            Handles errors of <see cref="T:WampSharp.V2.Core.Contracts.IWampCaller"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCallerError`1.CallError(System.Int64,`0,System.String)">
            <summary>
            Occurs when a CALL request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCallerError`1.CallError(System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when a CALL request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampCallerError`1.CallError(System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when a CALL request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampError`1">
            <summary>
            Handles generic client errors, or sends server proxy errors.
            </summary>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampError`1.Error(System.Int32,System.Int64,`0,System.String)">
            <summary>
            Occurs when a generic request error arrives.
            </summary>
            <param name="requestType">The request's type.</param>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampError`1.Error(System.Int32,System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when a generic request error arrives.
            </summary>
            <param name="requestType">The request's type.</param>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampError`1.Error(System.Int32,System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when a generic request error arrives.
            </summary>
            <param name="requestType">The request's type.</param>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampErrorCallback`1">
            <summary>
            Handles generic server errors.
            </summary>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampErrorCallback`1.Error(WampSharp.V2.Core.Contracts.IWampClientProxy,System.Int32,System.Int64,`0,System.String)">
            <summary>
            Occurs when a generic request error arrives.
            </summary>
            <param name="client">The client that sent this message.</param>
            <param name="requestType">The request's type.</param>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampErrorCallback`1.Error(WampSharp.V2.Core.Contracts.IWampClientProxy,System.Int32,System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when a generic request error arrives.
            </summary>
            <param name="client">The client that sent this message.</param>
            <param name="requestType">The request's type.</param>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampErrorCallback`1.Error(WampSharp.V2.Core.Contracts.IWampClientProxy,System.Int32,System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when a generic request error arrives.
            </summary>
            <param name="client">The client that sent this message.</param>
            <param name="requestType">The request's type.</param>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampPublisherError`1">
            <summary>
            Handles errors of <see cref="T:WampSharp.V2.Core.Contracts.IWampPublisher"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampPublisherError`1.PublishError(System.Int64,`0,System.String)">
            <summary>
            Occurs when a PUBLISH request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampPublisherError`1.PublishError(System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when a PUBLISH request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampPublisherError`1.PublishError(System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when a PUBLISH request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampSubscriberError`1">
            <summary>
            Handles errors of <see cref="T:WampSharp.V2.Core.Contracts.IWampSubscriber"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSubscriberError`1.SubscribeError(System.Int64,`0,System.String)">
            <summary>
            Occurs when a SUBSCRIBE request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSubscriberError`1.SubscribeError(System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when a SUBSCRIBE request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSubscriberError`1.SubscribeError(System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when a SUBSCRIBE request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSubscriberError`1.UnsubscribeError(System.Int64,`0,System.String)">
            <summary>
            Occurs when an UNSUBSCRIBE request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSubscriberError`1.UnsubscribeError(System.Int64,`0,System.String,`0[])">
            <summary>
            Occurs when an UNSUBSCRIBE request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSubscriberError`1.UnsubscribeError(System.Int64,`0,System.String,`0[],`0)">
            <summary>
            Occurs when an UNSUBSCRIBE request error arrives.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="details">The request details.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The error arguments.</param>
            <param name="argumentsKeywords">The error arguments keywords.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.WampErrorHandlerAttribute">
            <summary>
            Indicates that the following method is a WAMP2 error handler of a given type..
            </summary>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.WampErrorHandlerAttribute.#ctor(WampSharp.Core.Message.WampMessageType)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.Core.Contracts.WampErrorHandlerAttribute"/>.
            </summary>
            <param name="messageType">The <see cref="T:WampSharp.Core.Message.WampMessageType"/>
            this error handler handles.</param>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.WampErrorHandlerAttribute.MessageType">
            <summary>
            The request type this error handler handles. 
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.WampErrors">
            <summary>
            Contains predefined WAMP ERROR uris
            </summary>
            <remarks>
            From https://github.com/tavendo/WAMP/blob/master/spec/basic.md
            </remarks>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.InvalidUri">
            <summary>
            *Peer* provided an incorrect URI for any URI-based attribute of WAMP message, such as realm, topic or procedure
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.InvalidPayload">
            <summary>
            The application payload could not be serialized.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.CloseNormal">
            <summary>
            Indicates that the close was with a normal reason.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.NotAuthorized">
            <summary>
            *Peer* is not authorized to access the given resource. This might be triggered by a session trying to join a realm, a publish, subscribe, register or call.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.AuthorizationFailed">
            <summary>
            A Dealer or Broker could not determine if the *Peer* is authorized to perform
            a join, call, register, publish or subscribe, since the authorization operation
            *itself* failed. E.g. a custom authorizer did run into an error.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.NoSuchRealm">
            <summary>
            *Peer* wanted to join a non-existing realm (and the *Router* did not allow to auto-create the realm).
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.NoSuchRole">
            <summary>
            A *Peer* was to be authenticated under a Role that does not (or no longer) exists on the Router.
            For example, the *Peer* was successfully authenticated, but the Role configured does not
            exists - hence there is some misconfiguration in the Router.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.SystemShutdown">
            <summary>
            The *Peer* is shutting down completely - used as a `GOODBYE` (or `ABORT`) reason.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.CloseRealm">
            <summary>
            The *Peer* want to leave the realm - used as a `GOODBYE` reason.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.GoodbyeAndOut">
            <summary>
            A *Peer* acknowledges ending of a session - used as a `GOOBYE` reply reason.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.NoSuchProcedure">
            <summary>
            A *Dealer* could not perform a call, since the procedure called does not exist.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.NoSuchSubscription">
            <summary>
            A *Broker* could not perform a unsubscribe, since the given subscription is not active.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.NoSuchRegistration">
            <summary>
            A *Dealer* could not perform a unregister, since the given registration is not active.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.NoSuchInvocation">
            <summary>
            A *Dealer* could not perform a cancellation, since the given invocation does not exist.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.NoSuchSession">
            <summary>
            A router could not perform an operation, since a session ID specified was non-existant.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.InvalidArgument">
            <summary>
            A call failed, since the given argument types or values are not acceptable to the called procedure.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.InvalidTopic">
            <summary>
            A publish failed, since the given topic is not acceptable to the *Broker*.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.ProcedureAlreadyExists">
            <summary>
            A procedure could not be registered, since a procedure with the given URI is already registered (and the *Dealer* is not able to set up a distributed registration).
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.ProcedureExistsInvocationPolicyConflict">
            <summary>
            A procedure could not be registered, since a procedure with the given URI is 
            already registered, and the registration has a conflicting invocation policy.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.Contracts.WampErrors.Canceled">
            <summary>
            A Dealer or Callee canceled a call previously issued (WAMP AP).
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampClient`1">
            <summary>
            Contains all WAMPv2 client messages.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampClientProperties">
            <summary>
            Contains additional properties of a <see cref="T:WampSharp.V2.Core.Contracts.IWampClientProxy"/> proxy.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.IWampClientProperties.GoodbyeSent">
            <summary>
            Gets or sets a value indicating whether the connection was closed in an orderly manner
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.IWampClientProperties.Session">
            <summary>
            Gets the session of the current client. 
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.IWampClientProperties.Binding">
            <summary>
            Gets the binding associated with the current client.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampClientProperties`1">
            <summary>
            Contains additional properties of a <see cref="T:WampSharp.V2.Core.Contracts.IWampClientProxy`1"/> proxy.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.IWampClientProperties`1.Realm">
            <summary>
            Gets the realm the current client belongs to.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.IWampClientProperties`1.Binding">
            <summary>
            Gets the binding associated with the current client.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.IWampClientProperties`1.TransportDetails">
            <summary>
            Gets the transport details associated with this client.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampClientProxy">
            <summary>
            Represents a WAMP2 client proxy.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampClientProxy`1">
            <summary>
            Represents a WAMP2 client/client proxy.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampProxy">
            <summary>
            An interface used for dynamic proxy generator.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampRawClient">
            <summary>
            Represents a proxy to a client that can send raw messages.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampRawClient.Message(WampSharp.Core.Message.WampMessage{System.Object})">
            <summary>
            Sends a raw message to current client.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampServer`1">
            <summary>
            Represents all methods defined for a WAMP2 router.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampBrokerProxy`1">
            <summary>
            Represents a proxy to a WAMP2 broker.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBrokerProxy`1.Publish(System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,System.String)">
            <summary>
            Sends a PUBLISH message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to publish this message to.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBrokerProxy`1.Publish(System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,System.String,`0[])">
            <summary>
            Sends a PUBLISH message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to publish this message to.</param>
            <param name="arguments">The arguments to publish.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBrokerProxy`1.Publish(System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,System.String,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Sends a PUBLISH message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to publish this message to.</param>
            <param name="arguments">The arguments to publish.</param>
            <param name="argumentKeywords">Additional argument keywords to publish.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBrokerProxy`1.Subscribe(System.Int64,WampSharp.V2.Core.Contracts.SubscribeOptions,System.String)">
            <summary>
            Sends a SUBSCRIBE message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to subscribe to.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBrokerProxy`1.Unsubscribe(System.Int64,System.Int64)">
            <summary>
            Sends an UNSUBSCRIBE message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="subscriptionId">The request subscription id to remove.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampDealerProxy`1">
            <summary>
            Represents a proxy to a WAMP2 dealer.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Register(System.Int64,WampSharp.V2.Core.Contracts.RegisterOptions,System.String)">
            <summary>
            Sends a REGISTER message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="procedure">The uri of the procedure to register.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Unregister(System.Int64,System.Int64)">
            <summary>
            Sends an UNREGISTER message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="registrationId">The registration id of the registration to remove.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Call(System.Int64,WampSharp.V2.Core.Contracts.CallOptions,System.String)">
            <summary>
            Sends a CALL message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The call request options.</param>
            <param name="procedure">The uri of the procedure to call.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Call(System.Int64,WampSharp.V2.Core.Contracts.CallOptions,System.String,`0[])">
            <summary>
            Sends a CALL message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The call request options.</param>
            <param name="procedure">The uri of the procedure to call.</param>
            <param name="arguments">The arguments of the procedure to call.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Call(System.Int64,WampSharp.V2.Core.Contracts.CallOptions,System.String,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Sends a CALL message.
            </summary>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The call request options.</param>
            <param name="procedure">The uri of the procedure to call.</param>
            <param name="arguments">The arguments of the procedure to call.</param>
            <param name="argumentsKeywords">The argument keywords of the procedure to call.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Cancel(System.Int64,WampSharp.V2.Core.Contracts.CancelOptions)">
            <summary>
            Sends a CANCEL message.
            </summary>
            <param name="requestId">The request id of the call to cancel.</param>
            <param name="options">Additional options for cancelation.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Yield(System.Int64,WampSharp.V2.Core.Contracts.YieldOptions)">
            <summary>
            Sends a YIELD message.
            </summary>
            <param name="requestId">The request id (given in 
                <see cref="M:WampSharp.V2.Core.Contracts.IWampCallee`1.Invocation(System.Int64,System.Int64,WampSharp.V2.Core.Contracts.InvocationDetails)"/> message).</param>
            <param name="options">Additional options.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Yield(System.Int64,WampSharp.V2.Core.Contracts.YieldOptions,`0[])">
            <summary>
            Sends a YIELD message.
            </summary>
            <param name="requestId">The request id (given in 
                <see cref="M:WampSharp.V2.Core.Contracts.IWampCallee`1.Invocation(System.Int64,System.Int64,WampSharp.V2.Core.Contracts.InvocationDetails)"/> message).</param>
            <param name="options">Additional options.</param>
            <param name="arguments">The arguments of the current result.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealerProxy`1.Yield(System.Int64,WampSharp.V2.Core.Contracts.YieldOptions,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Sends a YIELD message.
            </summary>
            <param name="requestId">The request id (given in 
                <see cref="M:WampSharp.V2.Core.Contracts.IWampCallee`1.Invocation(System.Int64,System.Int64,WampSharp.V2.Core.Contracts.InvocationDetails)"/> message).</param>
            <param name="options">Additional options.</param>
            <param name="arguments">The arguments of the current result.</param>
            <param name="argumentsKeywords">The argument keywords of the current result.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampServerProxy">
            <summary>
            Represents a proxy to a WAMP2 router.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampServerProxy`1">
            <summary>
            Represents a proxy to a WAMP2 router.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampSessionProxy">
            <summary>
            Represents a proxy to a WAMP2 router session handler.
            </summary>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionProxy.Hello(System.String,WampSharp.V2.Core.Contracts.HelloDetails)">
            <summary>
            Sends a HELLO message.
            </summary>
            <param name="realm">The requested realm to join.</param>
            <param name="details">Details about the client.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionProxy.Abort(WampSharp.V2.Core.Contracts.AbortDetails,System.String)">
            <summary>
            Sends a ABORT message.
            </summary>
            <param name="details">Additional details.</param>
            <param name="reason">A uri representing the abort reason.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionProxy.Authenticate(System.String,WampSharp.V2.Core.Contracts.AuthenticateExtraData)">
            <summary>
            Sends an AUTHENTICATE message.
            </summary>
            <param name="signature">A signature.</param>
            <param name="extra">Extra data.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionProxy.Goodbye(WampSharp.V2.Core.Contracts.GoodbyeDetails,System.String)">
            <summary>
            Sends a GOODBYE message.
            </summary>
            <param name="details">Additional details.</param>
            <param name="reason">A uri representing the leave reason.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.EventDetails">
            <summary>
            Represents details for EVENT message.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.EventDetails.Publisher">
            <summary>
            Gets or sets the publisher id of this publication.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.EventDetails.Topic">
            <summary>
            Gets or sets the topic of this publication.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.EventDetails.PublisherAuthenticationRole">
            <summary>
            Gets the WAMP authrole of the pubisher. Only filled if pubisher is disclosed.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.EventDetails.PublisherAuthenticationId">
            <summary>
            Gets the WAMP authid of the pubisher. Only filled if pubisher is disclosed.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.EventDetails.Retained">
            <summary>
            Gets a value indicating whether the message was retained by the broker on the topic, rather than just published.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampBroker`1">
            <summary>
            Handles message of a WAMP2 broker.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBroker`1.Publish(WampSharp.V2.Core.Contracts.IWampPublisher,System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,System.String)">
            <summary>
            Occurs when a PUBLISH message is arrived.
            </summary>
            <param name="publisher">The publisher that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to publish this message to.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBroker`1.Publish(WampSharp.V2.Core.Contracts.IWampPublisher,System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,System.String,`0[])">
            <summary>
            Occurs when a PUBLISH message is arrived.
            </summary>
            <param name="publisher">The publisher that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to publish this message to.</param>
            <param name="arguments">The arguments to publish.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBroker`1.Publish(WampSharp.V2.Core.Contracts.IWampPublisher,System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,System.String,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Occurs when a PUBLISH message is arrived.
            </summary>
            <param name="publisher">The publisher that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to publish this message to.</param>
            <param name="arguments">The arguments to publish.</param>
            <param name="argumentKeywords">Additional argument keywords to publish.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBroker`1.Subscribe(WampSharp.V2.Core.Contracts.IWampSubscriber,System.Int64,WampSharp.V2.Core.Contracts.SubscribeOptions,System.String)">
            <summary>
            Occurs when a SUBSCRIBE message is arrived.
            </summary>
            <param name="subscriber">The subscriber that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="topicUri">The uri of the topic to subscribe to.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampBroker`1.Unsubscribe(WampSharp.V2.Core.Contracts.IWampSubscriber,System.Int64,System.Int64)">
            <summary>
            Occurs when a UNSUBSCRIBE message is arrived.
            </summary>
            <param name="subscriber">The subscriber that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="subscriptionId">The request subscription id to remove.</param>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.PublishOptions.Acknowledge">
            <summary>
            If <see langword="true"/>, acknowledge the publication with a success or error response.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.PublishOptions.ExcludeMe">
            <summary>
            If <see langword="true"/>, exclude the publisher from receiving the event, even if he is subscribed (and eligible).
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.PublishOptions.Exclude">
            <summary>
            List of WAMP session IDs to exclude from receiving this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.PublishOptions.Eligible">
            <summary>
            List of WAMP session IDs eligible to receive this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.PublishOptions.DiscloseMe">
            <summary>
            If <see langword="true"/>, request to disclose the publisher of this event to subscribers.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.PublishOptions.Retain">
            <summary>
            If <see langword="true"/>, request the broker retain this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.PublishOptions.EligibleAuthenticationIds">
            <summary>
            List of WAMP authids eligible to receive this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.PublishOptions.EligibleAuthenticationRoles">
            <summary>
            List of WAMP authroles eligible to receive this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.PublishOptions.ExcludeAuthenticationIds">
            <summary>
            List of WAMP authids to exclude from receiving this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.PublishOptions.ExcludeAuthenticationRoles">
            <summary>
            List of WAMP authroles to exclude from receiving this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.SubscribeOptions.Match">
            <summary>
            The topic matching method to be used for the subscription.
            (Mostly supported: <see cref="T:WampSharp.V2.Core.Contracts.WampMatchPattern"/> values: null/"exact"/"prefix"/"wildcard")
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.SubscribeOptions.GetRetained">
            <summary>
            Returns a value indicating whether the client wants the retained message we may have along with the subscription.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.CallOptions.ReceiveProgress">
            <summary>
            If <see langword="true"/>, indicates that the caller wants to receive progressive call results.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.CallOptions.DiscloseMe">
            <summary>
            If <see langword="true"/>, the caller requests to disclose itself to the callee.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.InvocationDetails.ReceiveProgress">
            <summary>
            Indicates if the callee should produce progressive results.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.InvocationDetails.Caller">
            <summary>
            The WAMP session ID of the caller.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.InvocationDetails.Procedure">
            <summary>
            The actual procedure being called.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.InvocationDetails.CallerAuthenticationRole">
            <summary>
            Get the WAMP authrole of the caller. Only filled if caller is disclosed.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.InvocationDetails.CallerAuthenticationId">
            <summary>
            Get the WAMP authid of the caller. Only filled if caller is disclosed.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampDealer`1">
            <summary>
            Handles messages of a WAMP2 dealer.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <remarks>These messages are part of the WAMP2 specification.</remarks>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealer`1.Register(WampSharp.V2.Core.Contracts.IWampCallee,System.Int64,WampSharp.V2.Core.Contracts.RegisterOptions,System.String)">
            <summary>
            Occurs when a REGISTER message arrives.
            </summary>
            <param name="callee">The callee that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The request options.</param>
            <param name="procedure">The uri of the procedure to register.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealer`1.Unregister(WampSharp.V2.Core.Contracts.IWampCallee,System.Int64,System.Int64)">
            <summary>
            Occurs when an UNREGISTER message arrives.
            </summary>
            <param name="callee">The callee that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="registrationId">The registration id of the registration to remove.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealer`1.Call(WampSharp.V2.Core.Contracts.IWampCaller,System.Int64,WampSharp.V2.Core.Contracts.CallOptions,System.String)">
            <summary>
            Occurs when a CALL message arrives.
            </summary>
            <param name="caller">The caller that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The call request options.</param>
            <param name="procedure">The uri of the procedure to call.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealer`1.Call(WampSharp.V2.Core.Contracts.IWampCaller,System.Int64,WampSharp.V2.Core.Contracts.CallOptions,System.String,`0[])">
            <summary>
            Occurs when a CALL message arrives.
            </summary>
            <param name="caller">The caller that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The call request options.</param>
            <param name="procedure">The uri of the procedure to call.</param>
            <param name="arguments">The arguments of the procedure to call.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealer`1.Call(WampSharp.V2.Core.Contracts.IWampCaller,System.Int64,WampSharp.V2.Core.Contracts.CallOptions,System.String,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Occurs when a CALL message arrives.
            </summary>
            <param name="caller">The caller that sent this message.</param>
            <param name="requestId">The request id of the message.</param>
            <param name="options">The call request options.</param>
            <param name="procedure">The uri of the procedure to call.</param>
            <param name="arguments">The arguments of the procedure to call.</param>
            <param name="argumentsKeywords">The argument keywords of the procedure to call.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampDealer`1.Cancel(WampSharp.V2.Core.Contracts.IWampCaller,System.Int64,WampSharp.V2.Core.Contracts.CancelOptions)">
            <summary>
            Occurs when a CANCEL message arrives.
            </summary>
            <param name="caller">The caller that sent this message.</param>
            <param name="requestId">The request id of the call to cancel.</param>
            <param name="options">Additional options for cancelation.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampRpcInvocationCallback`1">
            <summary>
            Handles WAMP2 dealer YIELD messages.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampRpcInvocationCallback`1.Yield(WampSharp.V2.Core.Contracts.IWampCallee,System.Int64,WampSharp.V2.Core.Contracts.YieldOptions)">
            <summary>
            Occurs when a YIELD message arrives.
            </summary>
            <param name="callee">The <see cref="T:WampSharp.V2.Core.Contracts.IWampCallee"/> that sent this message.</param>
            <param name="requestId">The request id (given in 
                <see cref="M:WampSharp.V2.Core.Contracts.IWampCallee`1.Invocation(System.Int64,System.Int64,WampSharp.V2.Core.Contracts.InvocationDetails)"/> message).</param>
            <param name="options">Additional options.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampRpcInvocationCallback`1.Yield(WampSharp.V2.Core.Contracts.IWampCallee,System.Int64,WampSharp.V2.Core.Contracts.YieldOptions,`0[])">
            <summary>
            Occurs when a YIELD message arrives.
            </summary>
            <param name="callee">The <see cref="T:WampSharp.V2.Core.Contracts.IWampCallee"/> that sent this message.</param>
            <param name="requestId">The request id (given in 
                <see cref="M:WampSharp.V2.Core.Contracts.IWampCallee`1.Invocation(System.Int64,System.Int64,WampSharp.V2.Core.Contracts.InvocationDetails)"/> message).</param>
            <param name="options">Additional options.</param>
            <param name="arguments">The arguments of the current result.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampRpcInvocationCallback`1.Yield(WampSharp.V2.Core.Contracts.IWampCallee,System.Int64,WampSharp.V2.Core.Contracts.YieldOptions,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Occurs when a YIELD message arrives.
            </summary>
            <param name="callee">The <see cref="T:WampSharp.V2.Core.Contracts.IWampCallee"/> that sent this message.</param>
            <param name="requestId">The request id (given in 
                <see cref="M:WampSharp.V2.Core.Contracts.IWampCallee`1.Invocation(System.Int64,System.Int64,WampSharp.V2.Core.Contracts.InvocationDetails)"/> message).</param>
            <param name="options">Additional options.</param>
            <param name="arguments">The arguments of the current result.</param>
            <param name="argumentsKeywords">The argument keywords of the current result.</param>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.RegisterOptions.DiscloseCaller">
            <summary>
            If <see langword="true"/>, the (registering) callee requests to disclose the identity of callers whenever called.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.RegisterOptions.Invoke">
            <summary>
            The procedure invocation policy to be used for the registration.
            (Mostly supported: <see cref="T:WampSharp.V2.Core.Contracts.WampInvokePolicy"/> values: null/"single"/"first"/"last"/"random"/"roundrobin")
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.RegisterOptions.Match">
            <summary>
            The procedure matching policy to be used for the registration.
            (Mostly supported: <see cref="T:WampSharp.V2.Core.Contracts.WampMatchPattern"/> values: null/"exact"/"prefix"/"wildcard")
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.ResultDetails.Progress">
            <summary>
            If <see langword="true"/>, this result is a progressive call result, and subsequent results (or a final error) will follow.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.YieldOptions.Progress">
            <summary>
            If <see langword="true"/>, this result is a progressive invocation result, and subsequent results (or a final error) will follow.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.AbortDetails">
            <summary>
            Represents details of an ABORT message.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.GoodbyeAbortDetails.Message">
            <summary>
            The message sent upon the ABORT message.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.GoodbyeDetails">
            <summary>
            Represents details of a GOODBYE message.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.HelloDetails.Roles">
            <summary>
            Gets the announced WAMP roles.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.HelloDetails.AuthenticationMethods">
            <summary>
            Gets the announced authentication methods.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.HelloDetails.AuthenticationId">
            <summary>
            Gets the announced authentication ID.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.HelloDetails.TransportDetails">
            <summary>
            Gets the transport details associated with this client.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.IWampSessionServer`1">
            <summary>
            Handles WAMP2 session server messages.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionServer`1.OnNewClient(WampSharp.V2.Core.Contracts.IWampClientProxy{`0})">
            <summary>
            Occurs when a new client connects.
            </summary>
            <param name="client">The new connected client.</param>
        </member>
        <member name="M:WampSharp.V2.Core.Contracts.IWampSessionServer`1.OnClientDisconnect(WampSharp.V2.Core.Contracts.IWampClientProxy{`0})">
            <summary>
            Occurs when a client disconnects.
            </summary>
            <param name="client">The disconnected client.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Contracts.WampDetailsOptions">
            <summary>
            An abstract class for WampDetails/WampOptions types.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.Contracts.WampDetailsOptions.OriginalValue">
            <summary>
            The original (serialized) received value.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.IWampIdGenerator">
            <summary>
            Generates request and session ids.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Core.IWampIdGenerator.Generate">
            <summary>
            Generates a id.
            </summary>
            <returns>The generated id.</returns>
        </member>
        <member name="T:WampSharp.V2.Core.IWampRegistrationSubscriptionToken">
            <summary>
            Represents a result from <see cref="M:WampSharp.V2.Rpc.IWampRpcOperationCatalog.Register(WampSharp.V2.Rpc.IWampRpcOperation,WampSharp.V2.Core.Contracts.RegisterOptions)"/> or
            <see cref="M:WampSharp.V2.PubSub.IWampTopicContainer.Subscribe(WampSharp.V2.PubSub.IWampRawTopicRouterSubscriber,System.String,WampSharp.V2.Core.Contracts.SubscribeOptions)"/> - includes the registration/subscription id.
            Disposing it removes the subscription/registration.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.IWampRegistrationSubscriptionToken.TokenId">
            <summary>
            Gets the subscription/registration id of the result of the
            SUBSCRIBED/REGISTRATION message.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilder`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampClientBuilder`2"/>
            that is specific to WAMPv2.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilder`1.#ctor(WampSharp.Core.Proxy.IWampOutgoingRequestSerializer,WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder{`0},WampSharp.Core.Listener.IWampClientContainer{`0,WampSharp.V2.Core.Contracts.IWampClientProxy{`0}},WampSharp.V2.Binding.IWampBinding{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilder`1"/>.
            </summary>
            <param name="outgoingSerializer">A <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer"/>
            used to serialize message calls into <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s</param>
            <param name="outgoingHandlerBuilder">An <see cref="T:WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder`1"/> used to build
            a <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/> per connection.</param>
            <param name="container">A <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/> that contains all clients.</param>
            <param name="binding">The <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/> to use.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilderFactory`1">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Listener.IWampClientBuilderFactory`2"/>
            using <see cref="T:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilder`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilderFactory`1.#ctor(WampSharp.Core.Proxy.IWampOutgoingRequestSerializer,WampSharp.Core.Listener.IWampOutgoingMessageHandlerBuilder{`0},WampSharp.V2.Binding.IWampBinding{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.Core.Listener.ClientBuilder.WampClientBuilderFactory`1"/>.
            </summary>
            <param name="outgoingSerializer">The <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer"/>
            used to serialize methods call to <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.</param>
            <param name="outgoingHandlerBuilder">The <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/>
            used to create the <see cref="T:WampSharp.Core.Proxy.IWampOutgoingMessageHandler"/> used to
            handle outgoing <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s.</param>
            <param name="binding">The <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/> to use.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Listener.WampListener`1">
            <summary>
            A <see cref="T:WampSharp.V2.Core.Listener.WampListener`1"/> that is
            WAMPv2 specific.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Core.Listener.WampListener`1.#ctor(WampSharp.Core.Listener.IWampConnectionListener{`0},WampSharp.Core.Dispatch.IWampIncomingMessageHandler{`0,WampSharp.V2.Core.Contracts.IWampClientProxy{`0}},WampSharp.Core.Listener.IWampClientContainer{`0,WampSharp.V2.Core.Contracts.IWampClientProxy{`0}},WampSharp.V2.Core.Contracts.IWampSessionServer{`0})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.Core.Listener.WampListener`1"/>
            </summary>
            <param name="listener">The <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/> used in order to 
                accept incoming connections.</param>
            <param name="handler">The <see cref="T:WampSharp.Core.Dispatch.IWampIncomingMessageHandler`1"/> used
                in order to dispatch incoming messages.</param>
            <param name="clientContainer">The <see cref="T:WampSharp.Core.Listener.IWampClientContainer`2"/> use
                in order to store the connected clients.</param>
            <param name="sessionHandler">A session handler that handles new clients.</param>
        </member>
        <member name="T:WampSharp.V2.Core.Serialization.WampMessageSerializerFactory">
            <summary>
            An implementation of <see cref="T:WampSharp.Core.Serialization.IWampMessageSerializerFactory"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Core.Serialization.WampMessageSerializerFactory.#ctor(WampSharp.Core.Proxy.IWampOutgoingRequestSerializer)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.Core.Serialization.WampMessageSerializerFactory"/>
            given a <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer"/>, used to serialize
            message.
            </summary>
            <param name="serializer">The given <see cref="T:WampSharp.Core.Proxy.IWampOutgoingRequestSerializer"/>.</param>
        </member>
        <member name="T:WampSharp.V2.Core.IWampUriValidator">
            <summary>
            Represents a mechanism that checks if uris are valid.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Core.IWampUriValidator.IsValid(System.String)">
            <summary>
            Returns a value indicating whether the given uri is a valid uri.
            </summary>
            <param name="uri">The given uri.</param>
            <returns>A value indicating whether the given uri is a valid uri.</returns>
        </member>
        <member name="M:WampSharp.V2.Core.IWampUriValidator.IsValid(System.String,System.String)">
            <summary>
            Returns a value indicating whether the given uri is a valid uri 
            for the given match type.
            </summary>
            <param name="uri">The given uri.</param>
            <param name="match">The given match type.</param>
            <returns>A value indicating whether the given uri is a valid uri 
            for the given match type.
            </returns>
        </member>
        <member name="T:WampSharp.V2.Core.LooseUriValidator">
            <summary>
            A <see cref="T:WampSharp.V2.Core.IWampUriValidator"/> that validates uris 
            via the loose uri definition.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.LooseUriValidator.mUriPatternAllowEmpty">
            <summary>
            Loose URI check allowing empty URI components
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.LooseUriValidator.mUriPatternDisallowEmpty">
            <summary>
            Loose URI check disallowing empty URI components
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.LooseUriValidator.mUriPatternAllowLastEmpty">
            <summary>
            Loose URI check disallowing empty URI components in all but the last component
            </summary>
        </member>
        <member name="M:WampSharp.V2.Core.LooseUriValidator.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:WampSharp.V2.Core.LooseUriValidator"/> class.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.StrictUriValidator">
            <summary>
            A <see cref="T:WampSharp.V2.Core.IWampUriValidator"/> that validates uris 
            via the strict uri definition.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.StrictUriValidator.mUriPatternAllowEmpty">
            <summary>
            Strict URI check allowing empty URI components
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.StrictUriValidator.mUriPatternDisallowEmpty">
            <summary>
            Strict URI check disallowing empty URI components
            </summary>
        </member>
        <member name="F:WampSharp.V2.Core.StrictUriValidator.mUriPatternAllowLastEmpty">
            <summary>
            Strict URI check disallowing empty URI components in all but the last component
            </summary>
        </member>
        <member name="M:WampSharp.V2.Core.StrictUriValidator.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:WampSharp.V2.Core.StrictUriValidator"/> class.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.WampUriRegexValidator">
            <summary>
            A base class for regex based <see cref="T:WampSharp.V2.Core.IWampUriValidator"/>s.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.WampUriRegexValidator.UriPatternAllowEmpty">
            <summary>
            Gets the regex to verify uris that allow empty components.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.WampUriRegexValidator.UriPatternDisallowEmpty">
            <summary>
            Gets the regex to verify uris that disallow empty components.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Core.WampUriRegexValidator.UriPatternAllowLastEmpty">
            <summary>
            Gets the regex to verify uris that allow only the last component to be empty.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Core.WampIdGenerator">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.Core.IWampIdGenerator"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V2.IWampRealmServiceProvider">
            <summary>
            Represents services for a WAMP realm.
            </summary>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.RegisterCallee(System.Object)">
            <summary>
            Registers an instance of a type having methods decorated with
            <see cref="T:WampSharp.V2.Rpc.WampProcedureAttribute"/> to the realm.
            </summary>
            <param name="instance">The instance to register.</param>
            <returns>A task that is completed when all methods are registered - its result is a
            <see cref="T:System.IAsyncDisposable"/>- disposing it will unregister the instance.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.RegisterCallee(System.Object,WampSharp.V2.ICalleeRegistrationInterceptor)">
            <summary>
            Registers an instance of a type having methods decorated with
            <see cref="T:WampSharp.V2.Rpc.WampProcedureAttribute"/> to the realm.
            </summary>
            <param name="instance">The instance to register.</param>
            <param name="interceptor">An object which allows registration customization.</param>
            <returns>A task that is completed when all methods are registered - its result is a
            <see cref="T:System.IAsyncDisposable"/>- disposing it will unregister the instance.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.RegisterCallee(System.Type,System.Func{System.Object})">
            <summary>
            Registers an instance of a type having methods decorated with
            <see cref="T:WampSharp.V2.Rpc.WampProcedureAttribute"/> to the realm.
            </summary>
            <param name="serviceType">The type of the service to register.</param>
            <param name="instanceProvider">A delegate that creates an instance of the service type per call.</param>
            <returns>A task that is completed when all methods are registered - its result is a
            <see cref="T:System.IAsyncDisposable"/>- disposing it will unregister the instance.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.RegisterCallee(System.Type,System.Func{System.Object},WampSharp.V2.ICalleeRegistrationInterceptor)">
            <summary>
            Registers an instance of a type having methods decorated with
            <see cref="T:WampSharp.V2.Rpc.WampProcedureAttribute"/> to the realm.
            </summary>
            <param name="serviceType">The type of the service to register.</param>
            <param name="instanceProvider">A delegate that creates an instance of the service type per call.</param>
            <param name="interceptor">An object which allows registration customization.</param>
            <returns>A task that is completed when all methods are registered - its result is a
            <see cref="T:System.IAsyncDisposable"/>- disposing it will unregister the instance.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.RegisterCallee``1(System.Func{``0})">
            <summary>
            Registers an instance of a type having methods decorated with
            <see cref="T:WampSharp.V2.Rpc.WampProcedureAttribute"/> to the realm.
            </summary>
            <param name="instanceProvider">A delegate that creates an instance per call.</param>
            <returns>A task that is completed when all methods are registered - its result is a
            <see cref="T:System.IAsyncDisposable"/>- disposing it will unregister the instance.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.RegisterCallee``1(System.Func{``0},WampSharp.V2.ICalleeRegistrationInterceptor)">
            <summary>
            Registers an instance of a type having methods decorated with
            <see cref="T:WampSharp.V2.Rpc.WampProcedureAttribute"/> to the realm.
            </summary>
            <param name="instanceProvider">A delegate that creates an instance per call.</param>
            <param name="interceptor">An object which allows registration customization.</param>
            <returns>A task that is completed when all methods are registered - its result is a
            <see cref="T:System.IAsyncDisposable"/>- disposing it will unregister the instance.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.GetCalleeProxy``1">
            <summary>
            Gets a proxy of a callee registered in the realm.
            </summary>
            <typeparam name="TProxy"></typeparam>
            <returns>The proxy to the callee.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.GetCalleeProxy``1(WampSharp.V2.ICalleeProxyInterceptor)">
            <summary>
            Gets a proxy of a callee registered in the realm.
            </summary>
            <param name="interceptor">An object which allows call customization.</param>
            <typeparam name="TProxy"></typeparam>
            <returns>The proxy to the callee.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.GetSubject``1(System.String)">
            <summary>
            Gets a <see cref="T:System.Reactive.Subjects.ISubject`1"/> representing a
            WAMP topic in the realm.
            </summary>
            <param name="topicUri">The WAMP topic uri.</param>
            <typeparam name="TEvent"></typeparam>
            <returns>The requested subject.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.GetSubject(System.String)">
            <summary>
            Gets a <see cref="T:WampSharp.V2.IWampSubject"/> representing a WAMP topic
            in the realm.
            </summary>
            <param name="topicUri">The WAMP topic uri.</param>
            <returns>The requested subject.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.RegisterPublisher(System.Object)">
            <summary>
            Registers an instance of a type having events decorated with
            <see cref="T:WampSharp.V2.PubSub.WampTopicAttribute"/> to the realm.
            </summary>
            <param name="instance">The instance to register.</param>
            <returns>A disposable - disposing it will unregister the realm from the events of the instance.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.RegisterPublisher(System.Object,WampSharp.V2.IPublisherRegistrationInterceptor)">
            <summary>
            Registers an instance of a type having events decorated with
            <see cref="T:WampSharp.V2.PubSub.WampTopicAttribute"/> to the realm.
            </summary>
            <param name="instance">The instance to register.</param>
            <param name="interceptor">An object which allows registration customization.</param>
            <returns>A disposable - disposing it will unregister the realm from the events of the instance.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.RegisterSubscriber(System.Object)">
            <summary>
            Registers an instance of a type having methods handlers decorated with
            <see cref="T:WampSharp.V2.PubSub.WampTopicAttribute"/> to the realm.
            </summary>
            <param name="instance">The instance to register.</param>
            <returns>A Task that is finished when SUBSCRIBE is complete - its result is a
            <see cref="T:System.IAsyncDisposable"/>- disposing it will unsubscribe from the topic.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.RegisterSubscriber(System.Object,WampSharp.V2.ISubscriberRegistrationInterceptor)">
            <summary>
            Registers an instance of a type having methods handlers decorated with
            <see cref="T:WampSharp.V2.PubSub.WampTopicAttribute"/> to the realm.
            </summary>
            <param name="instance">The instance to register.</param>
            <param name="interceptor">An object which allows registration customization.</param>
            <returns>A Task that is finished when SUBSCRIBE is complete - its result is a
            <see cref="T:System.IAsyncDisposable"/>- disposing it will unsubscribe from the topic.</returns>
        </member>
        <member name="M:WampSharp.V2.IWampRealmServiceProvider.GetSubject``1(System.String,WampSharp.V2.IWampEventValueTupleConverter{``0})">
            <summary>
            Gets a <see cref="T:System.Reactive.Subjects.ISubject`1"/> representing a
            WAMP topic in the realm.
            </summary>
            <param name="topicUri">The WAMP topic uri.</param>
            <param name="tupleConverter">An interface responsible for converting <see cref="T:WampSharp.V2.IWampEvent"/>s into <typeparamref name="TTuple"/>s
            and vice versa</param>
            <returns>The requested subject.</returns>
        </member>
        <member name="T:WampSharp.V2.IWampEvent">
            <summary>
            Represents a event that can be published via a <see cref="T:WampSharp.V2.IWampSubject"/>.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampEvent.Options">
            <summary>
            The publication objects.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampEvent.Arguments">
            <summary>
            The publication arguments.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampEvent.ArgumentsKeywords">
            <summary>
            The publication arguments keywords.
            </summary>
        </member>
        <member name="T:WampSharp.V2.IWampSerializedEvent">
            <summary>
            Represents a raw form of an event received from a WAMP topic.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampSerializedEvent.PublicationId">
            <summary>
            Gets the publication id of this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampSerializedEvent.Details">
            <summary>
            Gets the details associated with this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampSerializedEvent.Arguments">
            <summary>
            Gets the arguments of this event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampSerializedEvent.ArgumentsKeywords">
            <summary>
            Gets the arguments keywords of this event.
            </summary>
        </member>
        <member name="T:WampSharp.V2.IWampSubject">
            <summary>
            Represents a <see cref="T:System.Reactive.Subjects.ISubject`2"/> that publishes/receives messages
            via a WAMP topic.
            </summary>
        </member>
        <member name="T:WampSharp.V2.WampEvent">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.IWampEvent"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V2.WampEventValueTupleConverter`1">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.IWampEventValueTupleConverter`1"/>.
            </summary>
            <typeparam name="TTuple"></typeparam>
            <remarks>
            Derive from this class and specify your desired tuple type.
            </remarks>
            <example>
            public class MyEventValueTupleConverter : WampEventValueTupleConverter{(int x, int y)}
            {
            }
            </example>
        </member>
        <member name="T:WampSharp.V2.ISerializedValue">
            <summary>
            Represents a serialized value.
            </summary>
            <remarks>
            This allows users to work with serialized values without using a
            <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/>.
            </remarks>
        </member>
        <member name="M:WampSharp.V2.ISerializedValue.Deserialize``1">
            <summary>
            Deserializes the underlying value to the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:WampSharp.V2.ISerializedValue.Deserialize(System.Type)">
            <summary>
            Deserializes the underlying value to the given type.
            </summary>
            <param name="type">The deserialized type.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:WampSharp.V2.InMemoryWampHost.#ctor(WampSharp.V2.Realm.IWampRealmContainer,WampSharp.V2.Core.IWampUriValidator,WampSharp.V2.Core.IWampSessionMapper)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.InMemoryWampHost"/> given the
            <see cref="T:WampSharp.V2.Realm.IWampRealmContainer"/> associated with this host.
            </summary>
            <param name="realmContainer"></param>
            <param name="uriValidator"></param>
            <param name="sessionIdMap"></param>
        </member>
        <member name="T:WampSharp.V2.IWampHost">
            <summary>
            Represents a WAMP host.
            </summary>
        </member>
        <member name="P:WampSharp.V2.IWampHost.RealmContainer">
            <summary>
            Gets a realm container associated with this host.
            </summary>
        </member>
        <member name="M:WampSharp.V2.IWampHost.RegisterTransport(WampSharp.V2.Binding.Transports.IWampTransport,System.Collections.Generic.IEnumerable{WampSharp.V2.Binding.IWampBinding})">
            <summary>
            Registers a given transport for this host.
            </summary>
            <param name="transport">The given transport to register.</param>
            <param name="bindings">The given bindings to activate support with the given transport.</param>
        </member>
        <member name="M:WampSharp.V2.IWampHost.Open">
            <summary>
            Opens this host.
            </summary>
        </member>
        <member name="T:WampSharp.V2.WampBindingHost`1">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.Binding.IWampBindingHost"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.WampBindingHost`1.#ctor(WampSharp.V2.Realm.IWampHostedRealmContainer,WampSharp.V2.Realm.IWampRouterBuilder,WampSharp.Core.Listener.IWampConnectionListener{`0},WampSharp.V2.Binding.IWampBinding{`0},WampSharp.V2.Core.IWampSessionMapper)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.WampBindingHost`1"/>
            </summary>
            <param name="realmContainer">The <see cref="T:WampSharp.V2.Realm.IWampRealmContainer"/> this binding host
            is associated with.</param>
            <param name="builder">The <see cref="T:WampSharp.V2.Realm.IWampRouterBuilder"/> to use for this host.</param>
            <param name="connectionListener">The <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/> this 
            binding host listens to.</param>
            <param name="binding">The <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/> associated with this binding host.</param>
            <param name="sessionIdMap"></param>
        </member>
        <member name="T:WampSharp.V2.WampHost">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.IWampHost"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.WampHost.#ctor(WampSharp.V2.Realm.IWampRealmContainer,WampSharp.V2.Core.IWampUriValidator)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.WampHost"/> given the
            <see cref="T:WampSharp.V2.Realm.IWampRealmContainer"/> associated with this host.
            </summary>
            <param name="realmContainer"></param>
            <param name="uriValidator"></param>
        </member>
        <member name="T:WampSharp.V2.WampHostBase">
            <summary>
            A "base class" for all <see cref="T:WampSharp.V2.IWampHost"/> implementations.
            </summary>
        </member>
        <member name="M:WampSharp.V2.WampHostBase.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.WampHostBase"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.WampHostBase.#ctor(WampSharp.V2.Realm.IWampRealmContainer,WampSharp.V2.Core.IWampUriValidator,WampSharp.V2.Core.IWampSessionMapper)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.WampHostBase"/> given the
            <see cref="T:WampSharp.V2.Realm.IWampRealmContainer"/> associated with this host.
            </summary>
            <param name="realmContainer"></param>
            <param name="uriValidator"></param>
            <param name="sessionIdMap"></param>
        </member>
        <member name="T:WampSharp.V2.WampHostExtensions">
            <summary>
            Extension methods for <see cref="T:WampSharp.V2.IWampHost"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.WampHostExtensions.RegisterTransport(WampSharp.V2.IWampHost,WampSharp.V2.Binding.Transports.IWampTransport,WampSharp.V2.Binding.IWampBinding[])">
            <summary>
            Registers a given transport for a given host.
            </summary>
            <param name="host">The given host.</param>
            <param name="transport">The given transport to register.</param>
            <param name="binding">The given bindings to activate support with the given transport.</param>
        </member>
        <member name="T:WampSharp.V2.WampChannelReconnector">
            <summary>
            An object that reconnects to realm on connection loss.
            </summary>
        </member>
        <member name="M:WampSharp.V2.WampChannelReconnector.#ctor(WampSharp.V2.IWampChannel,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.WampChannelReconnector"/>.
            </summary>
            <param name="channel">The channel used to connect.</param>
            <param name="connector">The Task to use in order to connect.</param>
        </member>
        <member name="M:WampSharp.V2.WampChannelReconnector.Start">
            <summary>
            Start trying connection establishment to router.
            </summary>
        </member>
        <member name="T:WampSharp.V2.WampEventContext">
            <summary>
            Includes information about the current event.
            </summary>
        </member>
        <member name="T:WampSharp.V2.WampInvocationContext">
            <summary>
            Includes information about the current invocation.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Authentication.CookieCollectionCookieProvider">
            <summary>
            An implementation of <see cref="T:WampSharp.V2.Authentication.ICookieProvider"/> based on <see cref="T:System.Net.CookieCollection"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.CookieCollectionCookieProvider.#ctor(System.Net.CookieCollection)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.Authentication.CookieCollectionCookieProvider"/> given the underlying
            <see cref="T:System.Net.CookieCollection"/>.
            </summary>
            <param name="cookieCollection">The underlying <see cref="T:System.Net.CookieCollection"/>.</param>
        </member>
        <member name="P:WampSharp.V2.Authentication.CookieCollectionCookieProvider.Cookies">
            <summary>
            <see cref="P:WampSharp.V2.Authentication.ICookieProvider.Cookies"/>
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.CookieCollectionCookieProvider.GetCookieByName(System.String)">
            <summary>
            <see cref="M:WampSharp.V2.Authentication.ICookieProvider.GetCookieByName(System.String)"/>
            </summary>
        </member>
        <member name="T:WampSharp.V2.Authentication.ICookieAuthenticatorFactory">
            <summary>
            Represents a factory for <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticator"/> based on cookies.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.ICookieAuthenticatorFactory.CreateAuthenticator(WampSharp.V2.Authentication.ICookieProvider)">
            <summary>
            Creates a <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticator"/> given a <see cref="T:WampSharp.V2.Authentication.ICookieProvider"/>.
            </summary>
            <param name="cookieProvider">The given <see cref="T:WampSharp.V2.Authentication.ICookieProvider"/>.</param>
            <returns>The created <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticator"/>.</returns>
        </member>
        <member name="T:WampSharp.V2.Authentication.ICookieProvider">
            <summary>
            Represents a mechanism that allows cookie read access for WebSocket based connections.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.ICookieProvider.Cookies">
            <summary>
            Gets all cookies present.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.ICookieProvider.GetCookieByName(System.String)">
            <summary>
            Lookups a cookie by its name.
            </summary>
            <param name="cookieName">The given cookie name.</param>
            <returns>The requested cookie, or null if not present.</returns>
        </member>
        <member name="T:WampSharp.V2.Authentication.IWampAuthenticatedConnection`1">
            <summary>
            Represents a WAMP connection that a built-in authentication mechanism.
            (For example WebSockets with cookies)
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:WampSharp.V2.Authentication.IWampAuthenticatedConnection`1.Authenticator">
            <summary>
            Gets the authenticator associated with this connection.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Authentication.IWampAuthorizer">
            <summary>
            Represents a given WAMP session authorizer - i.e. a mechanism
            that determines whether a client is allowed to perform requested
            action.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.IWampAuthorizer.CanRegister(WampSharp.V2.Core.Contracts.RegisterOptions,System.String)">
            <summary>
            Returns a value indicating whether this client is allowed to perform the 
            requested registration.
            </summary>
            <param name="options">The requested registration options.</param>
            <param name="procedure">The requested procedure to register.</param>
            <returns>A value indicating whether the requested registration is allowed 
            for this client.</returns>
        </member>
        <member name="M:WampSharp.V2.Authentication.IWampAuthorizer.CanCall(WampSharp.V2.Core.Contracts.CallOptions,System.String)">
            <summary>
            Returns a value indicating whether this client is allowed to perform the 
            requested call.
            </summary>
            <param name="options">The requested call options.</param>
            <param name="procedure">The requested procedure to call.</param>
            <returns>A value indicating whether the requested call is allowed 
            for this client.</returns>
        </member>
        <member name="M:WampSharp.V2.Authentication.IWampAuthorizer.CanPublish(WampSharp.V2.Core.Contracts.PublishOptions,System.String)">
            <summary>
            Returns a value indicating whether this client is allowed to perform the 
            requested publication.
            </summary>
            <param name="options">The requested publish options.</param>
            <param name="topicUri">The requested topic to publish to.</param>
            <returns>A value indicating whether the requested publication is allowed 
            for this client.</returns>
        </member>
        <member name="M:WampSharp.V2.Authentication.IWampAuthorizer.CanSubscribe(WampSharp.V2.Core.Contracts.SubscribeOptions,System.String)">
            <summary>
            Returns a value indicating whether this client is allowed to perform the 
            requested subscription.
            </summary>
            <param name="options">The requested subscribe options.</param>
            <param name="topicUri">The requested topic to subscribe to.</param>
            <returns>A value indicating whether the requested subscription is allowed 
            for this client.</returns>
        </member>
        <member name="T:WampSharp.V2.Authentication.IWampSessionAuthenticator">
            <summary>
            Represents a WAMP session authenticator - i.e. a mechanism that performs the authentication
            process of an individual client.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.IWampSessionAuthenticator.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is already authenticated.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.IWampSessionAuthenticator.AuthenticationId">
            <summary>
            Gets the authentication id of the authenticated client.
            This will be sent upon WELCOME message (in details.auth_id)
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.IWampSessionAuthenticator.AuthenticationMethod">
            <summary>
            Gets the authentication method used for authentication.
            (This will be sent upon CHALLENGE and WELCOME messages in details.auth_method)
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.IWampSessionAuthenticator.ChallengeDetails">
            <summary>
            Gets the challenge details for the given client authentication process. 
            (This will be sent upon CHALLENGE message)
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.IWampSessionAuthenticator.Authenticate(System.String,WampSharp.V2.Core.Contracts.AuthenticateExtraData)">
            <summary>
            Occurs when a client responds to a CHALLENGE message with an AUTHENTICATE message.
            This should set <see cref="P:WampSharp.V2.Authentication.IWampSessionAuthenticator.IsAuthenticated"/> to true if the client passed authentication,
            and can throw <see cref="T:WampSharp.V2.Authentication.WampAuthenticationException"/> if client isn't authenticated.
            </summary>
            <param name="signature">The signature received upon AUTHENTICATE message.</param>
            <param name="extra">The extra data received upon AUTHENTICATE message.</param>
        </member>
        <member name="P:WampSharp.V2.Authentication.IWampSessionAuthenticator.Authorizer">
            <summary>
            Gets the authorizer to use after the client is authenticated.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.IWampSessionAuthenticator.WelcomeDetails">
            <summary>
            Gets the WELCOME details to send to client after successful authentication.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Authentication.IWampSessionAuthenticatorFactory">
            <summary>
            Represents a factory for <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticator"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.IWampSessionAuthenticatorFactory.GetSessionAuthenticator(WampSharp.V2.Authentication.WampPendingClientDetails,WampSharp.V2.Authentication.IWampSessionAuthenticator)">
            <summary>
            Creates a <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticator"/> for a pending client.
            </summary>
            <param name="details">The client's details.</param>
            <param name="transportAuthenticator">The client's transport </param>
            <returns>The <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticator"/> created for the given client.</returns>
        </member>
        <member name="T:WampSharp.V2.Authentication.IWampAuthenticationProvider">
            <summary>
            Represents a role-based authentication provider.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.IWampAuthenticationProvider.ProviderName">
            <summary>
            Gets the provider name. 
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.IWampAuthenticationProvider.GetRoleByName(System.String,System.String)">
            <summary>
            Gets an object representing the role given the realm and the role name.
            </summary>
            <param name="realm">The given realm to search to role in.</param>
            <param name="role">The given name of the role to search.</param>
            <returns>An object representing the requested role, or null if no such found.</returns>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampAuthenticationRole">
            <summary>
            An object representing an authetication role.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampAuthenticationRole.AuthenticationRole">
            <summary>
            Gets or sets the role name. This will be sent as authrole upon WELCOME message.
            If null, the <see cref="M:WampSharp.V2.Authentication.IWampAuthenticationProvider.GetRoleByName(System.String,System.String)"/>'s
            role parameter is used.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampAuthenticationRole.AuthenticationProvider">
            <summary>
            Gets or sets the authentication provider's name. This will be sent as authprovider upon WELCOME message.
            If null, <see cref="P:WampSharp.V2.Authentication.IWampAuthenticationProvider.ProviderName"/>
            is used instead.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampAuthenticationRole.Authorizer">
            <summary>
            Gets the <see cref="T:WampSharp.V2.Authentication.IWampAuthorizer"/> used to authorize the role's actions.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampStaticAuthenticationProvider">
            <summary>
            Represents an implementation of <see cref="T:WampSharp.V2.Authentication.IWampAuthenticationProvider"/>
            based on static data.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.WampStaticAuthenticationProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,WampSharp.V2.Authentication.WampAuthenticationRole}})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.Authentication.WampStaticAuthenticationProvider"/>
            given the static data.
            </summary>
            <param name="realmToRoleNameToRole">A mapping of realm name -> role name -> role object.</param>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampStaticAuthorizer">
            <summary>
            An implementation of <see cref="T:WampSharp.V2.Authentication.IWampAuthorizer"/> based on static data.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.WampStaticAuthorizer.#ctor(System.Collections.Generic.ICollection{WampSharp.V2.Authentication.WampUriPermissions})">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.Authentication.WampStaticAuthorizer"/> given
            the uri permissions data.
            </summary>
            <param name="uriPermissions">A collection of the uri permissions.</param>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampUriPermissions">
            <summary>
            Represents permissions to a given uri.
            Used by <see cref="T:WampSharp.V2.Authentication.WampStaticAuthorizer"/>
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampUriPermissions.Uri">
            <summary>
            Gets or sets the uri these permissions belong to.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampUriPermissions.Prefixed">
            <summary>
            Gets or sets a value indicating whether the uri is prefixed or not.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampUriPermissions.CanPublish">
            <summary>
            Gets or sets a value indicating whether PUBLISH action
            is allowed to this uri.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampUriPermissions.CanSubscribe">
            <summary>
            Gets or sets a value indicating whether SUBSCRIBE action
            is allowed to this uri.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampUriPermissions.CanCall">
            <summary>
            Gets or sets a value indicating whether CALL action
            is allowed to this uri.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampUriPermissions.CanRegister">
            <summary>
            Gets or sets a value indicating whether REGISTER action
            is allowed to this uri.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampAuthenticationException">
            <summary>
            An exception that can be thrown if can't authenticate with router.
            This sends an ABORT message to the router.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.WampAuthenticationException.#ctor(System.String,System.String)">
            <summary>
            Initializes an new instance of <see cref="T:WampSharp.V2.Authentication.WampAuthenticationException"/>
            </summary>
            <param name="message">The message to send with the details of the ABORT message.</param>
            <param name="reason">The reason to send with the ABORT message.</param>
        </member>
        <member name="M:WampSharp.V2.Authentication.WampAuthenticationException.#ctor(WampSharp.V2.Core.Contracts.AbortDetails,System.String)">
            <summary>
            Initializes an new instance of <see cref="T:WampSharp.V2.Authentication.WampAuthenticationException"/>
            </summary>
            <param name="details">The details to send with the ABORT message.</param>
            <param name="reason">The reason to send with the ABORT message.</param>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampAuthenticationException.Details">
            <summary>
            Gets the details to send with the ABORT message.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampAuthenticationException.Reason">
            <summary>
            Gets the reason to send with the ABORT message.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Authentication.IWampCraUserDb">
            <summary>
            Represents a database of WampCra users.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.IWampCraUserDb.GetUserById(System.String)">
            <summary>
            Gets the requetsed user's details given its authentication id.
            </summary>
            <param name="authenticationId">The requested user's authentication id.</param>
            <returns>The user's WAMP-CRA authentication details.</returns>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampCraChallengeDetails">
            <summary>
            An implementation of <see cref="T:WampSharp.V2.Core.Contracts.ChallengeDetails"/> specific for WAMP-CRA authentication.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.WampCraChallengeDetails.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Instantiates a new instance of <see cref="T:WampSharp.V2.Authentication.WampCraChallengeDetails"/>.
            </summary>
            <param name="salt">The salt to use, sent to the user upon CHALLENGE.extra.</param>
            <param name="iterations">The number of iterations to use, sent to the user upon CHALLENGE.extra.</param>
            <param name="keyLen">The key length to use, sent to the user upon CHALLENGE.extra.</param>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampCraChallengeDetails.Challenge">
            <summary>
            Gets the authentication challenge - this is the challenge that will be sent upon CHALLENGE
            message. (in challenge.extra)
            </summary>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampCraSessionAuthenticator">
            <summary>
            An abstract class for an implementation of a WAMP-CRA <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticator"/>.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampCraSessionAuthenticator.AuthenticationChallenge">
            <summary>
            Gets the authentication challenge - this is the challenge that will be sent upon CHALLENGE
            message
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampCraSessionAuthenticator.Secret">
            <summary>
            Gets the secret used to compute the signature.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampCraStaticUserDb">
            <summary>
            Represents a static data based implementation of <see cref="T:WampSharp.V2.Authentication.IWampCraUserDb"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.WampCraStaticUserDb.#ctor(System.Collections.Generic.IDictionary{System.String,WampSharp.V2.Authentication.WampCraUser})">
            <summary>
            Instantiates a new instance of <see cref="T:WampSharp.V2.Authentication.WampCraStaticUserDb"/> given
            a map of authentication id to WAMP-CRA user details.
            </summary>
            <param name="users">The given map of authentication id to WAMP-CRA user details.</param>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampCraUser">
            <summary>
            Represents details of a WAMP-CRA user.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampCraUser.AuthenticationId">
            <summary>
            Gets the user's authentication id. If null, uses HELLO.details.authid.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampCraUser.AuthenticationRole">
            <summary>
            Gets the user's authentication role.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampCraUser.Secret">
            <summary>
            Gets the user's secret. If salted, contains the derived key (and NOT the actual secret).
            </summary>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampCraUserDbAuthenticationFactory">
            <summary>
            An implementation of <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticatorFactory"/>
            which is based on <see cref="T:WampSharp.V2.Authentication.IWampCraUserDb"/> and <see cref="T:WampSharp.V2.Authentication.IWampAuthenticationProvider"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.WampCraUserDbAuthenticationFactory.#ctor(WampSharp.V2.Authentication.IWampAuthenticationProvider,WampSharp.V2.Authentication.IWampCraUserDb)">
            <summary>
            Instantiates a new instance of <see cref="T:WampSharp.V2.Authentication.WampCraUserDbAuthenticationFactory"/>
            given the <see cref="T:WampSharp.V2.Authentication.IWampAuthenticationProvider"/> and
            the <see cref="T:WampSharp.V2.Authentication.IWampCraUserDb"/> to use.
            </summary>
            <param name="authenticationProvider">The <see cref="T:WampSharp.V2.Authentication.IWampAuthenticationProvider"/> to get role permissions.</param>
            <param name="userDb">The <see cref="T:WampSharp.V2.Authentication.IWampCraUserDb"/> to use to get user WAMP-CRA details.</param>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampCraUserDbSessionAuthenticator">
            <summary>
            An implementation of <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticator"/> which uses
            <see cref="T:WampSharp.V2.Authentication.WampCraUser"/> in order to compute WAMP-CRA key, and uses
            <see cref="T:WampSharp.V2.Authentication.WampAuthenticationRole"/> in order to check permissions.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.WampCraUserDbSessionAuthenticator.#ctor(WampSharp.V2.Authentication.WampCraUser,WampSharp.V2.Authentication.WampAuthenticationRole,System.Int64)">
            <summary>
            Instantiates a new instance of <see cref="T:WampSharp.V2.Authentication.WampCraUserDbSessionAuthenticator"/>
            given the WAMP-CRA user details, the <see cref="T:WampSharp.V2.Authentication.WampAuthenticationRole"/> and
            the user's session id.
            </summary>
            <param name="user">The given user's WAMP-CRA details, used for authentication.</param>
            <param name="role">The given user's role, used for authorization.</param>
            <param name="sessionId">The given user's session id.</param>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampPendingClientDetails">
            <summary>
            Represents details of a client pending for authentication.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampPendingClientDetails.HelloDetails">
            <summary>
            Gets the pending client's HELLO message details.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampPendingClientDetails.SessionId">
            <summary>
            Gets the pending client's session id.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampPendingClientDetails.Realm">
            <summary>
            Gets the pending client's requested realm (sent upon HELLO message).
            </summary>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampSessionAuthenticator">
            <summary>
            An abstract class for <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticator"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.WampSessionAuthenticator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampSessionAuthenticator.IsAuthenticated">
            <summary>
            <see cref="P:WampSharp.V2.Authentication.IWampSessionAuthenticator.IsAuthenticated"/>
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampSessionAuthenticator.Authorizer">
            <summary>
            <see cref="P:WampSharp.V2.Authentication.IWampSessionAuthenticator.Authorizer"/>
            </summary>
        </member>
        <member name="M:WampSharp.V2.Authentication.WampSessionAuthenticator.Authenticate(System.String,WampSharp.V2.Core.Contracts.AuthenticateExtraData)">
            <summary>
            <see cref="M:WampSharp.V2.Authentication.IWampSessionAuthenticator.Authenticate(System.String,WampSharp.V2.Core.Contracts.AuthenticateExtraData)"/>
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampSessionAuthenticator.AuthenticationId">
            <summary>
            <see cref="P:WampSharp.V2.Authentication.IWampSessionAuthenticator.AuthenticationId"/>
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampSessionAuthenticator.AuthenticationMethod">
            <summary>
            <see cref="P:WampSharp.V2.Authentication.IWampSessionAuthenticator.AuthenticationMethod"/>
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampSessionAuthenticator.ChallengeDetails">
            <summary>
            <see cref="P:WampSharp.V2.Authentication.IWampSessionAuthenticator.ChallengeDetails"/>. 
            This method should be overriden for CHALLENGE details customization.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Authentication.WampSessionAuthenticator.WelcomeDetails">
            <summary>
            <see cref="P:WampSharp.V2.Authentication.IWampSessionAuthenticator.WelcomeDetails"/>. 
            This method should be overriden for WELCOME details customization.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Authentication.WampSessionAuthenticator`1">
            <summary>
            An abstract class for <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticator"/>, with typed <see cref="T:WampSharp.V2.Core.Contracts.AuthenticateExtraData"/>.
            </summary>
            <typeparam name="TExtra"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Authentication.WampSessionAuthenticator`1.Authenticate(System.String,`0)">
            <summary>
            <see cref="M:WampSharp.V2.Authentication.IWampSessionAuthenticator.Authenticate(System.String,WampSharp.V2.Core.Contracts.AuthenticateExtraData)"/>
            </summary>
        </member>
        <member name="T:WampSharp.V2.WampAuthenticationHost">
            <summary>
            An implementation of <see cref="T:WampSharp.V2.IWampHost"/> that supports authentication.
            </summary>
        </member>
        <member name="M:WampSharp.V2.WampAuthenticationHost.#ctor(WampSharp.V2.Authentication.IWampSessionAuthenticatorFactory,WampSharp.V2.Realm.IWampRealmContainer,WampSharp.V2.Core.IWampUriValidator)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.WampAuthenticationHost"/> given the
            <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticatorFactory"/> to use.
            </summary>
            <param name="sessionAuthenticationFactory">The <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticatorFactory"/>
            used to accept pending clients.</param>
            <param name="realmContainer">The <see cref="T:WampSharp.V2.Realm.IWampRealmContainer"/> associated with this
            host.</param>
            <param name="uriValidator">The <see cref="T:WampSharp.V2.Core.IWampUriValidator"/> used to validate uris.</param>
        </member>
        <member name="M:WampSharp.V2.WampAuthenticationHost.CreateAuthenticationBinding(WampSharp.V2.Binding.IWampBinding)">
            <summary>
            Fallback in case that binding doesn't implement
            IWampBinding{TMessage}
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="T:WampSharp.V2.WampMultiAuthenticationHost">
            <summary>
            An implementation of <see cref="T:WampSharp.V2.IWampHost"/> that supports authentication.
            </summary>
        </member>
        <member name="M:WampSharp.V2.WampMultiAuthenticationHost.#ctor(WampSharp.V2.Authentication.IWampSessionAuthenticatorFactory,WampSharp.V2.Realm.IWampRealmContainer,WampSharp.V2.Core.IWampUriValidator)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.WampMultiAuthenticationHost"/> given the
            <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticatorFactory"/> to use.
            </summary>
            <param name="defaultAuthenticatorFactory">A default <see cref="T:WampSharp.V2.Authentication.IWampSessionAuthenticatorFactory"/> that will be used for the overload <see cref="M:WampSharp.V2.WampMultiAuthenticationHost.RegisterTransport(WampSharp.V2.Binding.Transports.IWampTransport,System.Collections.Generic.IEnumerable{WampSharp.V2.Binding.IWampBinding})"/></param>
            <param name="realmContainer">The <see cref="T:WampSharp.V2.Realm.IWampRealmContainer"/> associated with this
            host.</param>
            <param name="uriValidator">The <see cref="T:WampSharp.V2.Core.IWampUriValidator"/> used to validate uris.</param>
        </member>
        <member name="M:WampSharp.V2.WampMultiAuthenticationHost.CreateAuthenticationBinding(WampSharp.V2.Binding.IWampBinding,WampSharp.V2.Authentication.IWampSessionAuthenticatorFactory)">
            <summary>
            Fallback in case that binding doesn't implement
            IWampBinding{TMessage}
            </summary>
            <param name="binding"></param>
            <param name="authenticatorFactory"></param>
            <returns></returns>
        </member>
        <member name="T:WampSharp.V2.Binding.Contracts.CborBinding`1">
            <summary>
            A base class that represents WAMP2 wamp.2.cbor binding.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.Contracts.JsonBinding`1">
            <summary>
            A base class that represents WAMP2 wamp.2.json binding.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.Contracts.MsgPackBinding`1">
            <summary>
            A base class that represents WAMP2 wamp.2.msgpack binding.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.IWampBinaryBinding`1">
            <summary>
            Represents a binary format <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.IWampBinding`1">
            <summary>
            Represents a WAMP binding.
            A WAMP binding is method for serializing messages from/to raw format.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Binding.IWampBinding`1.GetRawMessage(WampSharp.Core.Message.WampMessage{System.Object})">
            <summary>
            Gets a raw message representing the given <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.
            </summary>
            <param name="message">The given <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.</param>
            <returns>The raw message.</returns>
            <remarks>A raw <see cref="T:WampSharp.Core.Message.WampMessage`1"/> is a
            <see cref="T:WampSharp.Core.Message.WampMessage`1"/> with additional properties
            which include a raw format of the message. This allows optimization
            of serializing the exact same message for multiple client.</remarks>
        </member>
        <member name="P:WampSharp.V2.Binding.IWampBinding`1.Formatter">
            <summary>
            Get the <see cref="T:WampSharp.Core.Serialization.IWampFormatter`1"/> this binding serializes
            or deserializes messages with.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Binding.IWampBinding">
            <summary>
            A non-generic base class <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Binding.IWampBinding.Name">
            <summary>
            The name of the current binding.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Binding.IWampBindingHost">
            <summary>
            Represents a host for a specific <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            TODO: Get rid of this?
        </member>
        <member name="M:WampSharp.V2.Binding.IWampBindingHost.Open">
            <summary>
            Opens the host, so it starts listening for messages.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Binding.IWampRouterBinding`1">
            <summary>
            Represents a router-side binding.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Binding.IWampRouterBinding`1.CreateHost(WampSharp.V2.Realm.IWampHostedRealmContainer,WampSharp.Core.Listener.IWampConnectionListener{`0},WampSharp.V2.Core.IWampSessionMapper)">
            <summary>
            Creates a <see cref="T:WampSharp.V2.Binding.IWampBindingHost"/> hosting this binding.
            </summary>
            <param name="realmContainer"></param>
            <param name="connectionListener"></param>
            <param name="sessionIdMap"></param>
            <returns></returns>
        </member>
        <member name="T:WampSharp.V2.Binding.IWampTextBinding`1">
            <summary>
            Represents a text format <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.IWampTransportBinding`2">
            <summary>
            Represents a raw format <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRaw"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.Parsers.IWampBinaryMessageParser`1">
            <summary>
            Parses binary messages from the stream into <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s
            and vice versa.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.Parsers.IWampMessageParser`2">
            <summary>
            Parses raw formatted messages from the stream into <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s
            and vice versa.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Binding.Parsers.IWampMessageParser`2.Parse(`1)">
            <summary>
            Parses a raw message to <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.
            </summary>
            <param name="raw">The given raw messsage.</param>
            <returns>The converted <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.</returns>
        </member>
        <member name="M:WampSharp.V2.Binding.Parsers.IWampMessageParser`2.Format(WampSharp.Core.Message.WampMessage{System.Object})">
            <summary>
            Formats a <see cref="T:WampSharp.Core.Message.WampMessage`1"/> to a raw format.
            </summary>
            <param name="message">The given <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.</param>
            <returns>A raw format representing the given <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.</returns>
        </member>
        <member name="M:WampSharp.V2.Binding.Parsers.IWampMessageParser`2.GetBytes(`1)">
            <summary>
            Serializes a raw message to bytes.
            </summary>
            <param name="raw">The given raw message.</param>
            <returns>Bytes representing the binary format of the given raw message.</returns>
        </member>
        <member name="M:WampSharp.V2.Binding.Parsers.IWampStreamingMessageParser`1.Parse(System.IO.Stream)">
            <summary>
            Parses a raw message to <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.
            </summary>
            <returns>The converted <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.</returns>
        </member>
        <member name="M:WampSharp.V2.Binding.Parsers.IWampStreamingMessageParser`1.Format(WampSharp.Core.Message.WampMessage{System.Object},System.IO.Stream)">
            <summary>
            Formats a <see cref="T:WampSharp.Core.Message.WampMessage`1"/> to a raw format.
            </summary>
            <param name="message">The given <see cref="T:WampSharp.Core.Message.WampMessage`1"/>.</param>
            <param name="stream">The stream to write the message to.</param>
        </member>
        <member name="T:WampSharp.V2.Binding.Parsers.IWampTextMessageParser`1">
            <summary>
            Parses string messages from the stream into <see cref="T:WampSharp.Core.Message.WampMessage`1"/>s
            and vice versa.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.Transports.IWampTransport">
            <summary>
            Represents a WAMP transport - that is a mechanism that supplies a <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/>
            given a <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Binding.Transports.IWampTransport.Open">
            <summary>
            Opens this transport.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Binding.Transports.IWampTransport.GetListener``1(WampSharp.V2.Binding.IWampBinding{``0})">
            <summary>
            Gets a <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/> that is suitable
            for the given <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            <param name="binding">The given <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.</param>
            <typeparam name="TMessage"></typeparam>
            <returns>The requested <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/>.</returns>
        </member>
        <member name="T:WampSharp.V2.Binding.Transports.IWampTransport`1">
            <summary>
            Represents a <see cref="T:WampSharp.V2.Binding.Transports.IWampTransport"/> for a given underlying raw type.
            </summary>
            <typeparam name="TRaw"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Binding.Transports.IWampTransport`1.GetListener``1(WampSharp.V2.Binding.IWampTransportBinding{``0,`0})">
            <summary>
            Gets a <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/> that is suitable
            for the given <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            <param name="binding">The given <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.</param>
            <typeparam name="TMessage"></typeparam>
            <returns>The requested <see cref="T:WampSharp.Core.Listener.IWampConnectionListener`1"/>.</returns>
        </member>
        <member name="T:WampSharp.V2.Binding.WampBinding`1">
            <summary>
            Represents a base class for <see cref="T:WampSharp.V2.Binding.IWampBinding`1"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Binding.WampTransportBinding`2">
            <summary>
            A base class for a WAMP transport binding.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRaw"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Client.IWampTopicContainerProxy">
            <summary>
            Represents a proxy to a WAMP topic
            </summary>
        </member>
        <member name="M:WampSharp.V2.Client.IWampTopicContainerProxy.GetTopicByUri(System.String)">
            <summary>
            Gets a <see cref="T:WampSharp.V2.Client.IWampTopicProxy"/> given a WAMP topic uri.
            </summary>
            <param name="topicUri">The given topic uri.</param>
            <returns>The requested <see cref="T:WampSharp.V2.Client.IWampTopicProxy"/>.</returns>
        </member>
        <member name="T:WampSharp.V2.Client.IWampTopicProxy">
            <summary>
            Represents a proxy to a WAMP topic.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampTopicProxy.TopicUri">
            <summary>
            The topic uri
            </summary>
        </member>
        <member name="M:WampSharp.V2.Client.IWampTopicProxy.Publish(WampSharp.V2.Core.Contracts.PublishOptions)">
            <summary>
            Publishes an event to the current topic.
            </summary>
            <param name="options">The options to publish with.</param>
            <returns>A task which is completed when the publish is done, with
            the publication id.</returns>
        </member>
        <member name="M:WampSharp.V2.Client.IWampTopicProxy.Publish(WampSharp.V2.Core.Contracts.PublishOptions,System.Object[])">
            <summary>
            Publishes an event to the current topic.
            </summary>
            <param name="options">The options to publish with.</param>
            <param name="arguments">The arguments of the published event.</param>
            <returns>A task which is completed when the publish is done, with
            the publication id.</returns>
        </member>
        <member name="M:WampSharp.V2.Client.IWampTopicProxy.Publish(WampSharp.V2.Core.Contracts.PublishOptions,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Publishes an event to the current topic.
            </summary>
            <param name="options">The options to publish with.</param>
            <param name="arguments">The arguments of the published event.</param>
            <param name="argumentKeywords">The argument keywords of the published event.</param>
            <returns>A task which is completed when the publish is done, with
            the publication id.</returns>
        </member>
        <member name="M:WampSharp.V2.Client.IWampTopicProxy.Subscribe(WampSharp.V2.PubSub.IWampRawTopicClientSubscriber,WampSharp.V2.Core.Contracts.SubscribeOptions)">
            <summary>
            Subscribes to the the current topic.
            </summary>
            <param name="subscriber">The subscriber to receive the topic's events.</param>
            <param name="options">The options to subscribe with.</param>
            <returns>A task that completes when the subscription is done,
            with a disposable that its dispose will remove the subscription.</returns>
        </member>
        <member name="T:WampSharp.V2.Client.IWampRealmProxy">
            <summary>
            Represents a proxy to a WAMP realm.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampRealmProxy.Name">
            <summary>
            Gets this realm's name.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampRealmProxy.TopicContainer">
            <summary>
            Gets the <see cref="T:WampSharp.V2.Client.IWampTopicContainerProxy"/> associated with this
            realm proxy.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampRealmProxy.RpcCatalog">
            <summary>
            Gets the <see cref="T:WampSharp.V2.Client.IWampRpcOperationCatalogProxy"/> associated with this
            realm proxy.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampRealmProxy.Services">
            <summary>
            Gets the services for this realm proxy.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampRealmProxy.Monitor">
            <summary>
            Gets a connection monitor assoicated with this realm proxy.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampRealmProxy.Proxy">
            <summary>
            Gets a proxy to the server.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Client.WampRealmProxy`1">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.Client.IWampRealmProxy"/>.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Client.IWampRpcOperationCatalogProxy">
            <summary>
            Represents a proxy to a <see cref="T:WampSharp.V2.Rpc.IWampRpcOperationCatalog"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Client.IWampRpcOperationInvokerProxy">
            <summary>
            Represents a proxy to <see cref="T:WampSharp.V2.Rpc.IWampRpcOperationInvoker"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Client.IWampRpcOperationInvokerProxy`1">
            <summary>
            Represents a proxy to <see cref="T:WampSharp.V2.Rpc.IWampRpcOperationInvoker"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Client.IWampRpcOperationInvokerProxy`1.Invoke(WampSharp.V2.Rpc.IWampRawRpcOperationClientCallback,WampSharp.V2.Core.Contracts.CallOptions,System.String)">
            <summary>
            Invokes a operation remotely.
            </summary>
            <param name="caller">The caller that gets operation result callbacks.</param>
            <param name="options">The options to invoke the operation with.</param>
            <param name="procedure">The procedure to invoke.</param>
        </member>
        <member name="M:WampSharp.V2.Client.IWampRpcOperationInvokerProxy`1.Invoke(WampSharp.V2.Rpc.IWampRawRpcOperationClientCallback,WampSharp.V2.Core.Contracts.CallOptions,System.String,`0[])">
            <summary>
            Invokes a operation remotely.
            </summary>
            <param name="caller">The caller that gets operation result callbacks.</param>
            <param name="options">The options to invoke the operation with.</param>
            <param name="procedure">The procedure to invoke.</param>
            <param name="arguments">The arguments to invoke the operation with.</param>
        </member>
        <member name="M:WampSharp.V2.Client.IWampRpcOperationInvokerProxy`1.Invoke(WampSharp.V2.Rpc.IWampRawRpcOperationClientCallback,WampSharp.V2.Core.Contracts.CallOptions,System.String,`0[],System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Invokes a operation remotely.
            </summary>
            <param name="caller">The caller that gets operation result callbacks.</param>
            <param name="options">The options to invoke the operation with.</param>
            <param name="procedure">The procedure to invoke.</param>
            <param name="arguments">The arguments to invoke the operation with.</param>
            <param name="argumentsKeywords">The arguments keywords to invoke the operation with.</param>
        </member>
        <member name="T:WampSharp.V2.Client.IWampRpcOperationRegistrationProxy">
            <summary>
            Represents a proxy to a <see cref="T:WampSharp.V2.Rpc.IWampRpcOperationCatalog"/>'s
            registration methods.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Client.IWampRpcOperationRegistrationProxy.Register(WampSharp.V2.Rpc.IWampRpcOperation,WampSharp.V2.Core.Contracts.RegisterOptions)">
            <summary>
            Registers an operation to the realm.
            </summary>
            <param name="operation">The operation to register.</param>
            <param name="options">The options to register with.</param>
            <returns>A task that completes when registration is complete.</returns>
        </member>
        <member name="T:WampSharp.V2.Client.AuthenticationResponse">
            <summary>
            Represents an AUTHENTICATE message to send to the router in response to a
            corresponding CHALLENGE message.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.AuthenticationResponse.Signature">
            <summary>
            Gets the signature to send.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.AuthenticationResponse.Extra">
            <summary>
            Gets the extra data to send.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Client.DefaultWampClientAuthenticator">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.Client.IWampClientAuthenticator"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Client.DefaultWampClientAuthenticator.Authenticate(System.String,WampSharp.V2.Core.Contracts.ChallengeDetails)">
            <summary>
            Just throws exception on CHALLENGE
            </summary>
            <param name="authmethod"></param>
            <param name="extra"></param>
            <returns></returns>
        </member>
        <member name="T:WampSharp.V2.Client.IWampClientAuthenticator">
            <summary>
            Represents an interface that can respond to a router's CHALLENGE message..
            </summary>
        </member>
        <member name="M:WampSharp.V2.Client.IWampClientAuthenticator.Authenticate(System.String,WampSharp.V2.Core.Contracts.ChallengeDetails)">
            <summary>
            Occurs when server sends a CHALLENGE message.
            </summary>
            <param name="authmethod">The authentication method the server declared it's using.</param>
            <param name="extra">The challenge details sent with this request.</param>
            <returns>A <see cref="T:WampSharp.V2.Client.AuthenticationResponse"/> - an object representing the
            AUTHENTICATE message.</returns>
            <exception cref="T:WampSharp.V2.Authentication.WampAuthenticationException">If can't respond to CHALLENGE.</exception>
        </member>
        <member name="P:WampSharp.V2.Client.IWampClientAuthenticator.AuthenticationMethods">
            <summary>
            Gets an array of the authentication methods this client supports.
            These will be sent upon HELLO message.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampClientAuthenticator.AuthenticationId">
            <summary>
            Gets the authid of this client. This will be sent upon HELLO message.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Client.IWampClientConnectionMonitor">
            <summary>
            Contains events of connection status.
            </summary>
        </member>
        <member name="E:WampSharp.V2.Client.IWampClientConnectionMonitor.ConnectionEstablished">
            <summary>
            Occurs when a connection is established.
            </summary>
        </member>
        <member name="E:WampSharp.V2.Client.IWampClientConnectionMonitor.ConnectionBroken">
            <summary>
            Occurs when a connection is broken.
            </summary>
        </member>
        <member name="E:WampSharp.V2.Client.IWampClientConnectionMonitor.ConnectionError">
            <summary>
            Occurs when a connection is faulted.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Client.IWampClientConnectionMonitor.IsConnected">
            <summary>
            Gets a value indicating whether the channel is currently connected.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Client.WampAuthenticationNotImplementedException">
            <summary>
            Occurs when an CHALLENGE message has been received, 
            but no <see cref="T:WampSharp.V2.Client.IWampClientAuthenticator"/> has been provided.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Client.WampAuthenticationNotImplementedException.#ctor(System.String,System.String)">
            <summary>
            Initializes an new instance of <see cref="T:WampSharp.V2.Client.WampAuthenticationNotImplementedException"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Client.WampCraClientAuthenticator">
            <summary>
            An authenticator that uses WAMP-CRA authentication method.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Client.WampCraClientAuthenticator.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of a <see cref="T:WampSharp.V2.Client.WampCraClientAuthenticator"/>.
            </summary>
            <param name="authenticationId">The authentication id to use (for example, the user name)</param>
            <param name="secret">The secret to use.</param>
            <param name="salt">The salt to use.</param>
            <param name="iterations">The number of iterations to use (default value = 1000).</param>
            <param name="keyLen">The key length to use (default value = 32).</param>
        </member>
        <member name="M:WampSharp.V2.Fluent.ChannelFactoryExtensions.ConnectToRealm(WampSharp.V2.IWampChannelFactory,System.String)">
            <summary>
            Indicates that the user wants to connect to a given realm.
            </summary>
            <param name="factory">The WAMP channel factory to use.</param>
            <param name="realm">The requested realm to connect to.</param>
        </member>
        <member name="M:WampSharp.V2.Fluent.ChannelFactoryExtensions.Authenticator(WampSharp.V2.Fluent.ChannelFactorySyntax.ISerializationSyntax,WampSharp.V2.Client.IWampClientAuthenticator)">
            <summary>
            Indicates that the user wants to use a given <see cref="T:WampSharp.V2.Client.IWampClientAuthenticator"/>.
            </summary>
            <param name="serializationSyntax">The given fluent syntax state.</param>
            <param name="authenticator">The given <see cref="T:WampSharp.V2.Client.IWampClientAuthenticator"/>.</param>
        </member>
        <member name="M:WampSharp.V2.Management.IWampSessionManagementService.KillBySessionId(System.Int64,System.String,System.String)">
            <summary>
            Kills a single session identified by session ID.
            The caller of this meta procedure may only specify session IDs other than its own session.  Specifying the caller's own session will result in a `wamp.error.no_such_session` since no _other_ session with that ID exists.
            The keyword arguments are optional, and if not provided the reason defaults to `wamp.close.normal` and the message is omitted from the `GOODBYE` sent to the closed session. 
            </summary>
            <param name="session">The session ID of the session to close.</param>
            <param name="reason">reason for closing session, sent to client in GOODBYE.Reason.</param>
            <param name="message">additional information sent to client in GOODBYE.Details under the key "message".</param>
        </member>
        <member name="M:WampSharp.V2.Management.IWampSessionManagementService.KillByAuthId(System.String,System.String,System.String)">
            <summary>
            Kills all currently connected sessions that have the specified `authid`.
            If the caller's own session has the specified `authid`, the caller's session is excluded from the closed sessions.
            The keyword arguments are optional, and if not provided the reason defaults to `wamp.close.normal` and the message is omitted from the `GOODBYE` sent to the closed session.
            </summary>
            <param name="authId">The authentication ID identifying sessions to close.</param>
            <param name="reason">reason for closing sessions, sent to clients in GOODBYE.Reason</param>
            <param name="message">additional information sent to clients in GOODBYE.Details under the key "message".</param>
            <returns>The number of sessions closed by this meta procedure.</returns>
        </member>
        <member name="M:WampSharp.V2.Management.IWampSessionManagementService.KillByAuthRole(System.String,System.String,System.String)">
            <summary>
            Kills all currently connected sessions that have the specified `authrole`.
            If the caller's own session has the specified `authrole`, the caller's session is excluded from the closed sessions.
            The keyword arguments are optional, and if not provided the reason defaults to `wamp.close.normal` and the message is omitted from the `GOODBYE` sent to the closed session.        [WampProcedure("wamp.session.kill_by_authrole")]
            </summary>
            <param name="authRole">The authentication role identifying sessions to close.</param>
            <param name="reason">reason for closing sessions, sent to clients in GOODBYE.Reason.</param>
            <param name="message">additional information sent to clients in `GOODBYE.Details` under the key "message".</param>
            <returns>The number of sessions closed by this meta procedure.</returns>
        </member>
        <member name="M:WampSharp.V2.Management.IWampSessionManagementService.KillAll(System.String,System.String)">
            <summary>
            Kills all currently connected sessions in the caller's realm.
            The caller's own session is excluded from the closed sessions.  Closing all sessions in the realm will not generate session meta events or testament events, since no subscribers would remain to receive these events.
            The keyword arguments are optional, and if not provided the reason defaults to `wamp.close.normal` and the message is omitted from the `GOODBYE` sent to the closed session.
            </summary>
            <param name="reason">reason for closing sessions, sent to clients in `GOODBYE.Reason`.</param>
            <param name="message">additional information sent to clients in `GOODBYE.Details` under the key "message".</param>
            <returns>The number of sessions closed by this meta procedure.</returns>
        </member>
        <member name="M:WampSharp.V2.Management.IWampSessionManagementServiceProxy.KillBySessionIdAsync(System.Int64,System.String,System.String)">
            <summary>
            Kills a single session identified by session ID.
            The caller of this meta procedure may only specify session IDs other than its own session.  Specifying the caller's own session will result in a `wamp.error.no_such_session` since no _other_ session with that ID exists.
            The keyword arguments are optional, and if not provided the reason defaults to `wamp.close.normal` and the message is omitted from the `GOODBYE` sent to the closed session. 
            </summary>
            <param name="session">The session ID of the session to close.</param>
            <param name="reason">reason for closing session, sent to client in GOODBYE.Reason.</param>
            <param name="message">additional information sent to client in GOODBYE.Details under the key "message".</param>
        </member>
        <member name="M:WampSharp.V2.Management.IWampSessionManagementServiceProxy.KillByAuthIdAsync(System.String,System.String,System.String)">
            <summary>
            Kills all currently connected sessions that have the specified `authid`.
            If the caller's own session has the specified `authid`, the caller's session is excluded from the closed sessions.
            The keyword arguments are optional, and if not provided the reason defaults to `wamp.close.normal` and the message is omitted from the `GOODBYE` sent to the closed session.
            </summary>
            <param name="authId">The authentication ID identifying sessions to close.</param>
            <param name="reason">reason for closing sessions, sent to clients in GOODBYE.Reason</param>
            <param name="message">additional information sent to clients in GOODBYE.Details under the key "message".</param>
            <returns>The number of sessions closed by this meta procedure.</returns>
        </member>
        <member name="M:WampSharp.V2.Management.IWampSessionManagementServiceProxy.KillByAuthRoleAsync(System.String,System.String,System.String)">
            <summary>
            Kills all currently connected sessions that have the specified `authrole`.
            If the caller's own session has the specified `authrole`, the caller's session is excluded from the closed sessions.
            The keyword arguments are optional, and if not provided the reason defaults to `wamp.close.normal` and the message is omitted from the `GOODBYE` sent to the closed session.        [WampProcedure("wamp.session.kill_by_authrole")]
            </summary>
            <param name="authRole">The authentication role identifying sessions to close.</param>
            <param name="reason">reason for closing sessions, sent to clients in GOODBYE.Reason.</param>
            <param name="message">additional information sent to clients in `GOODBYE.Details` under the key "message".</param>
            <returns>The number of sessions closed by this meta procedure.</returns>
        </member>
        <member name="M:WampSharp.V2.Management.IWampSessionManagementServiceProxy.KillAllAsync(System.String,System.String)">
            <summary>
            Kills all currently connected sessions in the caller's realm.
            The caller's own session is excluded from the closed sessions.  Closing all sessions in the realm will not generate session meta events or testament events, since no subscribers would remain to receive these events.
            The keyword arguments are optional, and if not provided the reason defaults to `wamp.close.normal` and the message is omitted from the `GOODBYE` sent to the closed session.
            </summary>
            <param name="reason">reason for closing sessions, sent to clients in `GOODBYE.Reason`.</param>
            <param name="message">additional information sent to clients in `GOODBYE.Details` under the key "message".</param>
            <returns>The number of sessions closed by this meta procedure.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy.GetAllRegistrationsAsync">
            <summary>
            Retrieves registration IDs listed according to match policies.
            </summary>
            <returns>An object with a list of registration IDs for each match policy.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy.LookupRegistrationIdAsync(System.String,WampSharp.V2.Core.Contracts.RegisterOptions)">
            <summary>
            Obtains the registration Async(if any) managing a procedure, according to some match policy.
            </summary>
            <param name="procedureUri">The procedure to lookup the registration for.</param>
            <param name="options">Same options as when registering a procedure.</param>
            <returns>The ID of the registration managing the procedure, if found, or null.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy.GetBestMatchingRegistrationIdAsync(System.String)">
            <summary>
            Obtains the registration best matching a given procedure URI.
            </summary>
            <param name="procedureUri">The procedure URI to match.</param>
            <returns>The ID of best matching registration, or null.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy.GetRegistrationDetailsAsync(System.Int64)">
            <summary>
            Retrieves information on a particular registration.
            </summary>
            <param name="registrationId">The ID of the registration to retrieve.</param>
            <returns>Details on the registration.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy.GetCalleesIdsAsync(System.Int64)">
            <summary>
            Retrieves a list of session IDs for sessions currently attached to the registration.
            </summary>
            <param name="registrationId">The ID of the registration to get calles for.</param>
            <returns>A list of WAMP session IDs of callees currently attached to the 
            registration.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationDescriptorProxy.CountCalleesAsync(System.Int64)">
            <summary>
            Obtains the number of sessions currently attached to a registration.
            </summary>
            <param name="registrationId">The ID of the registration to get the number of callees for.</param>
            <returns>The number of callees currently attached to a registration.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSessionDescriptorProxy.CountSessionsAsync">
            <summary>
            Obtains the number of sessions currently attached to the realm.
            </summary>
            <returns>The number of sessions currently attached to the realm.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSessionDescriptorProxy.GetAllSessionIdsAsync">
            <summary>
            Retrieves a list of the session IDs for all sessions currently attached to the realm.
            </summary>
            <returns>List of WAMP session IDs (order undefined).</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSessionDescriptorProxy.GetSessionDetailsAsync(System.Int64)">
            <summary>
            Retrieves information on a specific session.
            </summary>
            <param name="sessionId">The session ID of the session to retrieve details for.</param>
            <returns>Information on the particular session.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy.GetAllSubscriptionIdsAsync">
            <summary>
            Retrieves subscription IDs listed according to match policies.
            </summary>
            <returns>An object with a list of subscription IDs for each match policy.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy.LookupSubscriptionIdAsync(System.String,WampSharp.V2.Core.Contracts.SubscribeOptions)">
            <summary>
            Obtains the subscription Async(if any) managing a topic, according to some match policy.
            </summary>
            <param name="topicUri">The URI of the topic.</param>
            <param name="options">Same options as when subscribing to a topic.</param>
            <returns>The ID of the subscription managing the topic, if found, or null.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy.GetMatchingSubscriptionIdsAsync(System.String)">
            <summary>
            Retrieves a list of IDs of subscriptions matching a topic URI, irrespective of match policy.
            </summary>
            <param name="topicUri">The topic to match.</param>
            <returns>A list of all matching subscription IDs, or null</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy.GetSubscriptionDetailsAsync(System.Int64)">
            <summary>
            Retrieves information on a particular subscription.
            </summary>
            <param name="subscriptionId">The ID of the subscription to retrieve.</param>
            <returns>Details on the subscription.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy.GetSubscribersAsync(System.Int64)">
            <summary>
            Retrieves a list of session IDs for sessions currently attached to the subscription.
            </summary>
            <param name="subscriptionId">The ID of the subscription to get subscribers for.</param>
            <returns>A list of WAMP session IDs of subscribers currently attached to the subscription.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionDescriptorProxy.CountSubscribersAsync(System.Int64)">
            <summary>
            Obtains the number of sessions currently attached to a subscription.
            </summary>
            <param name="subscriptionId">The ID of the subscription to get the number of subscribers for.</param>
            <returns>The number of sessions currently attached to a subscription.</returns>
        </member>
        <member name="T:WampSharp.V2.MetaApi.RegistrationEvents.OnCreateDelegate">
            <summary>
            Fired when a registration is created through a registration 
            request for an URI which was previously without a registration.
            </summary>
            <param name="sessionId">The session ID performing the registration request.</param>
            <param name="details">Information on the created registration.</param>
        </member>
        <member name="T:WampSharp.V2.MetaApi.RegistrationEvents.OnRegisterDelegate">
            <summary>
            Fired when a session is added to a registration.
            </summary>
            <param name="sessionId">The ID of the session being added to a registration.</param>
            <param name="registrationId">The ID of the registration to which a session is being added.</param>
        </member>
        <member name="T:WampSharp.V2.MetaApi.RegistrationEvents.OnUnregisterDelegate">
            <summary>
            Fired when a session is removed from a subscription.
            </summary>
            <param name="sessionId">The ID of the session being removed from a registration.</param>
            <param name="registrationId">The ID of the registration from which a session is being removed.</param>
        </member>
        <member name="T:WampSharp.V2.MetaApi.RegistrationEvents.OnDeleteDelegate">
            <summary>
            Fired when a registration is deleted after the last session attached to it has been removed.
            </summary>
            <param name="sessionId">The ID of the last session being removed from a registration.</param>
            <param name="registrationId">The ID of the registration being deleted.</param>
        </member>
        <member name="T:WampSharp.V2.MetaApi.SessionEvents.OnJoinDelegate">
            <summary>
            Fired when a session joins a realm on the router.
            </summary>
            <param name="details">An object describing the joined session.</param>
        </member>
        <member name="T:WampSharp.V2.MetaApi.SessionEvents.OnLeaveDelegate">
            <summary>
            Fired when a session leaves a realm on the router or is disconnected.
            </summary>
            <param name="sessionId">The session ID of the session that left.</param>
        </member>
        <member name="T:WampSharp.V2.MetaApi.SubscriptionEvents.OnCreateDelegate">
            <summary>
            Fired when a subscription is created through a subscription request for a topic 
            which was previously without subscribers.
            </summary>
            <param name="sessionId">ID of the session performing the subscription request.</param>
            <param name="details">Information on the created subscription.</param>
        </member>
        <member name="T:WampSharp.V2.MetaApi.SubscriptionEvents.OnSubscribeDelegate">
            <summary>
            Fired when a session is added to a subscription.
            </summary>
            <param name="sessionId">ID of the session being added to a subscription.</param>
            <param name="subscriptionId">ID of the subscription to which the session is being added.</param>
        </member>
        <member name="T:WampSharp.V2.MetaApi.SubscriptionEvents.OnUnsubscribeDelegate">
            <summary>
            Fired when a session is removed from a subscription.
            </summary>
            <param name="sessionId">ID of the session being removed from a subscription.</param>
            <param name="subscriptionId">ID of the subscription from which the session is being removed.</param>
        </member>
        <member name="T:WampSharp.V2.MetaApi.SubscriptionEvents.OnDeleteDelegate">
            <summary>
            Fired when a subscription is deleted after the last session attached to it has been removed.
            </summary>
            <param name="sessionId">ID of the last session being removed from a subscription.</param>
            <param name="subscriptionId">ID of the subscription being deleted.</param>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionDescriptor.GetAllSubscriptionIds">
            <summary>
            Retrieves subscription IDs listed according to match policies.
            </summary>
            <returns>An object with a list of subscription IDs for each match policy.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionDescriptor.LookupSubscriptionId(System.String,WampSharp.V2.Core.Contracts.SubscribeOptions)">
            <summary>
            Obtains the subscription (if any) managing a topic, according to some match policy.
            </summary>
            <param name="topicUri">The URI of the topic.</param>
            <param name="options">Same options as when subscribing to a topic.</param>
            <returns>The ID of the subscription managing the topic, if found, or null.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionDescriptor.GetMatchingSubscriptionIds(System.String)">
            <summary>
            Retrieves a list of IDs of subscriptions matching a topic URI, irrespective of match policy.
            </summary>
            <param name="topicUri">The topic to match.</param>
            <returns>A list of all matching subscription IDs, or null</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionDescriptor.GetSubscriptionDetails(System.Int64)">
            <summary>
            Retrieves information on a particular subscription.
            </summary>
            <param name="subscriptionId">The ID of the subscription to retrieve.</param>
            <returns>Details on the subscription.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionDescriptor.GetSubscribers(System.Int64)">
            <summary>
            Retrieves a list of session IDs for sessions currently attached to the subscription.
            </summary>
            <param name="subscriptionId">The ID of the subscription to get subscribers for.</param>
            <returns>A list of WAMP session IDs of subscribers currently attached to the subscription.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionDescriptor.CountSubscribers(System.Int64)">
            <summary>
            Obtains the number of sessions currently attached to a subscription.
            </summary>
            <param name="subscriptionId">The ID of the subscription to get the number of subscribers for.</param>
            <returns>The number of sessions currently attached to a subscription.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionMetadataSubscriber.OnCreate(System.Int64,WampSharp.V2.MetaApi.SubscriptionDetails)">
            <summary>
            Fired when a subscription is created through a subscription request for a topic 
            which was previously without subscribers.
            </summary>
            <param name="sessionId">ID of the session performing the subscription request.</param>
            <param name="details">Information on the created subscription.</param>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionMetadataSubscriber.OnSubscribe(System.Int64,System.Int64)">
            <summary>
            Fired when a session is added to a subscription.
            </summary>
            <param name="sessionId">ID of the session being added to a subscription.</param>
            <param name="subscriptionId">ID of the subscription to which the session is being added.</param>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionMetadataSubscriber.OnUnsubscribe(System.Int64,System.Int64)">
            <summary>
            Fired when a session is removed from a subscription.
            </summary>
            <param name="sessionId">ID of the session being removed from a subscription.</param>
            <param name="subscriptionId">ID of the subscription from which the session is being removed.</param>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSubscriptionMetadataSubscriber.OnDelete(System.Int64,System.Int64)">
            <summary>
            Fired when a subscription is deleted after the last session attached to it has been removed.
            </summary>
            <param name="sessionId">ID of the last session being removed from a subscription.</param>
            <param name="subscriptionId">ID of the subscription being deleted.</param>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationDescriptor.GetAllRegistrations">
            <summary>
            Retrieves registration IDs listed according to match policies.
            </summary>
            <returns>An object with a list of registration IDs for each match policy.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationDescriptor.LookupRegistrationId(System.String,WampSharp.V2.Core.Contracts.RegisterOptions)">
            <summary>
            Obtains the registration (if any) managing a procedure, according to some match policy.
            </summary>
            <param name="procedureUri">The procedure to lookup the registration for.</param>
            <param name="options">Same options as when registering a procedure.</param>
            <returns>The ID of the registration managing the procedure, if found, or null.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationDescriptor.GetBestMatchingRegistrationId(System.String)">
            <summary>
            Obtains the registration best matching a given procedure URI.
            </summary>
            <param name="procedureUri">The procedure URI to match.</param>
            <returns>The ID of best matching registration, or null.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationDescriptor.GetRegistrationDetails(System.Int64)">
            <summary>
            Retrieves information on a particular registration.
            </summary>
            <param name="registrationId">The ID of the registration to retrieve.</param>
            <returns>Details on the registration.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationDescriptor.GetCalleesIds(System.Int64)">
            <summary>
            Retrieves a list of session IDs for sessions currently attached to the registration.
            </summary>
            <param name="registrationId">The ID of the registration to get calles for.</param>
            <returns>A list of WAMP session IDs of callees currently attached to the 
            registration.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationDescriptor.CountCallees(System.Int64)">
            <summary>
            Obtains the number of sessions currently attached to a registration.
            </summary>
            <param name="registrationId">The ID of the registration to get the number of callees for.</param>
            <returns>The number of callees currently attached to a registration.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationMetadataSubscriber.OnCreate(System.Int64,WampSharp.V2.MetaApi.RegistrationDetails)">
            <summary>
            Fired when a registration is created through a registration 
            request for an URI which was previously without a registration.
            </summary>
            <param name="sessionId">The session ID performing the registration request.</param>
            <param name="details">Information on the created registration.</param>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationMetadataSubscriber.OnRegister(System.Int64,System.Int64)">
            <summary>
            Fired when a session is added to a registration.
            </summary>
            <param name="sessionId">The ID of the session being added to a registration.</param>
            <param name="registrationId">The ID of the registration to which a session is being added.</param>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationMetadataSubscriber.OnUnregister(System.Int64,System.Int64)">
            <summary>
            Fired when a session is removed from a subscription.
            </summary>
            <param name="sessionId">The ID of the session being removed from a registration.</param>
            <param name="registrationId">The ID of the registration from which a session is being removed.</param>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampRegistrationMetadataSubscriber.OnDelete(System.Int64,System.Int64)">
            <summary>
            Fired when a registration is deleted after the last session attached to it has been removed.
            </summary>
            <param name="sessionId">The ID of the last session being removed from a registration.</param>
            <param name="registrationId">The ID of the registration being deleted.</param>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSessionDescriptor.CountSessions">
            <summary>
            Obtains the number of sessions currently attached to the realm.
            </summary>
            <returns>The number of sessions currently attached to the realm.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSessionDescriptor.GetAllSessionIds">
            <summary>
            Retrieves a list of the session IDs for all sessions currently attached to the realm.
            </summary>
            <returns>List of WAMP session IDs (order undefined).</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSessionDescriptor.GetSessionDetails(System.Int64)">
            <summary>
            Retrieves information on a specific session.
            </summary>
            <param name="sessionId">The session ID of the session to retrieve details for.</param>
            <returns>Information on the particular session.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSessionMetadataSubscriber.OnJoin(WampSharp.V2.MetaApi.WampSessionDetails)">
            <summary>
            Fired when a session joins a realm on the router.
            </summary>
            <param name="details">An object describing the joined session.</param>
        </member>
        <member name="M:WampSharp.V2.MetaApi.IWampSessionMetadataSubscriber.OnLeave(System.Int64)">
            <summary>
            Fired when a session leaves a realm on the router or is disconnected.
            </summary>
            <param name="sessionId">The session ID of the session that left.</param>
        </member>
        <member name="P:WampSharp.V2.MetaApi.WampSessionDetails.Realm">
            <summary>
            Gets or sets the realm that the session is attached to
            </summary>
        </member>
        <member name="P:WampSharp.V2.MetaApi.WampSessionDetails.AuthProvider">
            <summary>
            Gets or sets the provider that performed the authentication of the session 
            </summary>
        </member>
        <member name="P:WampSharp.V2.MetaApi.WampSessionDetails.AuthId">
            <summary>
            Gets or sets the authentication ID of the session
            </summary>
        </member>
        <member name="P:WampSharp.V2.MetaApi.WampSessionDetails.AuthRole">
            <summary>
            Gets or sets the authentication role of the session
            </summary>
        </member>
        <member name="P:WampSharp.V2.MetaApi.WampSessionDetails.AuthMethod">
            <summary>
            Gets or sets the authentication method that was used for authentication of the session
            </summary>
        </member>
        <member name="P:WampSharp.V2.MetaApi.WampSessionDetails.Session">
            <summary>
            Gets or sets the session ID of the session.
            </summary>
        </member>
        <member name="P:WampSharp.V2.MetaApi.WampSessionDetails.TransportDetails">
            <summary>
            Gets or sets implementation defined information about the WAMP transport 
            the session is running over.
            </summary>
        </member>
        <member name="M:WampSharp.V2.MetaApi.WampHostedRealmExtensions.HostMetaApiService(WampSharp.V2.Realm.IWampHostedRealm)">
            <summary>
            Hosts a WAMP meta-api service describing the given realm.
            </summary>
            <param name="hostedRealm">The given realm.</param>
            <returns>A disposable: disposing it will unregister the hosted meta-api service.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.WampHostedRealmExtensions.HostTestamentService(WampSharp.V2.Realm.IWampHostedRealm)">
            <summary>
            Hosts a WAMP testament service for the given realm.
            </summary>
            <param name="hostedRealm">The given realm.</param>
            <returns>A disposable: disposing it will unregister the hosted testaments service.</returns>
        </member>
        <member name="M:WampSharp.V2.MetaApi.WampHostedRealmExtensions.HostSessionManagementService(WampSharp.V2.Realm.IWampHostedRealm,WampSharp.V2.Core.IWampUriValidator)">
            <summary>
            Hosts a WAMP session management service for the given realm.
            </summary>
            <param name="hostedRealm">The given realm.</param>
            <param name="uriValidator">The <see cref="T:WampSharp.V2.Core.IWampUriValidator"/> to use to verify GOODBYE message reason uri (see also <see cref="P:WampSharp.V2.Core.Contracts.GoodbyeMessage.Reason"/>).</param>
            <returns>A disposable: disposing it will unregister the hosted session management service.</returns>
        </member>
        <member name="T:WampSharp.V2.PubSub.WampSubscriptionAddEventArgs">
            <summary>
            Occurs when a subscription was added.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.WampSubscriptionAddEventArgs.Subscriber">
            <summary>
            Gets a proxy to the subscribing subscriber.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.WampSubscriptionAddEventArgs.Options">
            <summary>
            Gets the options the subscriber subscribed with.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.WampTopicCreatedEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for an event where a topic was created.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.WampTopicEventArgs.Topic">
            <summary>
            Gets the relevant topic.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.WampTopicRemovedEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for an event where a topic was removed.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.IRemoteWampTopicSubscriber">
            <summary>
            Represents a proxy to a remote topic subscriber.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.IRemoteWampTopicSubscriber.SubscriptionId">
            <summary>
            Gets the subscription id of the subscriber.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.IRemoteWampTopicSubscriber.SessionId">
            <summary>
            Gets the session id of the subscriber.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.IRemoteWampTopicSubscriber.AuthenticationId">
            <summary>
            Gets the authentication id of the subscriber.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.IRemoteWampTopicSubscriber.AuthenticationRole">
            <summary>
            Gets the authentication role of the subscriber.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.IRemoteWampTopicSubscriber.Event(System.Int64,WampSharp.V2.Core.Contracts.EventDetails)">
            <summary>
            Publishes an EVENT message with the given parameters.
            </summary>
            <param name="publicationId">The publication id of this event.</param>
            <param name="details">The details to publish.</param>
        </member>
        <member name="M:WampSharp.V2.PubSub.IRemoteWampTopicSubscriber.Event(System.Int64,WampSharp.V2.Core.Contracts.EventDetails,System.Object[])">
            <summary>
            Publishes an EVENT message with the given parameters.
            </summary>
            <param name="publicationId">The publication id of this event.</param>
            <param name="details">The details to publish.</param>
            <param name="arguments">The arguments to publish.</param>
        </member>
        <member name="M:WampSharp.V2.PubSub.IRemoteWampTopicSubscriber.Event(System.Int64,WampSharp.V2.Core.Contracts.EventDetails,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Publishes an EVENT message with the given parameters.
            </summary>
            <param name="details">The details to publish.</param>
            <param name="publicationId">The publication id of this event.</param>
            <param name="arguments">The arguments to publish.</param>
            <param name="argumentsKeywords">The arguments keywords to publish.</param>
        </member>
        <member name="T:WampSharp.V2.PubSub.ISubscriptionNotifier">
            <summary>
            Declares events for <see cref="T:WampSharp.V2.PubSub.IWampTopic"/> subscriptions.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.ISubscriptionNotifier.SubscriptionAdding">
            <summary>
            Occurs before a subscription was added.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.ISubscriptionNotifier.SubscriptionAdded">
            <summary>
            Occurs after a subscription was added.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.ISubscriptionNotifier.SubscriptionRemoving">
            <summary>
            Occurs before a subscription was removed.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.ISubscriptionNotifier.SubscriptionRemoved">
            <summary>
            Occurs before a subscription was removed.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.ISubscriptionNotifier.TopicEmpty">
            <summary>
            Occurs when the topic is empty.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.IWampCustomizedSubscriptionId">
            <summary>
            Represents an id for a subscription to a WAMP topic.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.IWampRawTopicClientSubscriber">
            <summary>
            Represents a topic subscriber that lives outside a router process.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampRawTopicClientSubscriber.Event``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.EventDetails)">
            <summary>
            Occurs when an incoming event is avilable.
            </summary>
            <param name="formatter">A formatter that can be used to deserialize event arguments.</param>
            <param name="publicationId">The publication id of the incoming publication.</param>
            <param name="details">The details about this publication.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampRawTopicClientSubscriber.Event``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.EventDetails,``0[])">
            <summary>
            Occurs when an incoming event is avilable.
            </summary>
            <param name="formatter">A formatter that can be used to deserialize event arguments.</param>
            <param name="publicationId">The publication id of the incoming publication.</param>
            <param name="details">The details about this publication.</param>
            <param name="arguments">The arguments of this publication.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampRawTopicClientSubscriber.Event``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.EventDetails,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Occurs when an incoming event is avilable.
            </summary>
            <param name="formatter">A formatter that can be used to deserialize event arguments.</param>
            <param name="publicationId">The publication id of the incoming publication.</param>
            <param name="details">The details about this publication.</param>
            <param name="arguments">The arguments of this publication.</param>
            <param name="argumentsKeywords">The arguments keywords of this publication.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.PubSub.IWampTopic">
            <summary>
            Represents a WAMP topic.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.IWampTopic.HasSubscribers">
            <summary>
            Gets a value indicating whether this topic has subscribers.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.IWampTopic.TopicUri">
            <summary>
            Gets the topic uri of this topic.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopic.Publish``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.PublishOptions)">
            <summary>
            Publishes a message to the topic
            </summary>
            <param name="formatter">The formatter been used to publish the message.</param>
            <param name="publicationId"></param>
            <param name="publishOptions">The options of the publication.</param>
            <typeparam name="TMessage"></typeparam>
            <returns>The publication id.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopic.Publish``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,``0[])">
            <summary>
            Publishes a message to the topic
            </summary>
            <param name="formatter">The formatter been used to publish the message.</param>
            <param name="publicationId"></param>
            <param name="publishOptions">The options of the publication.</param>
            <param name="arguments">The arguments to publish.</param>
            <typeparam name="TMessage"></typeparam>
            <returns>The publication id.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopic.Publish``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Publishes a message to the topic
            </summary>
            <param name="formatter">The formatter been used to publish the message.</param>
            <param name="publicationId"></param>
            <param name="publishOptions">The options of the publication.</param>
            <param name="arguments">The arguments to publish.</param>
            <param name="argumentKeywords">The arguments keywords to publish.</param>
            <typeparam name="TMessage"></typeparam>
            <returns>The publication id.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopic.Subscribe(WampSharp.V2.PubSub.IWampRawTopicRouterSubscriber)">
            <summary>
            Subscribes a given subscriber to the topic.
            </summary>
            <param name="subscriber">The given subscriber.</param>
            <returns>A disposable, when disposed the subscription will be canceled.</returns>
        </member>
        <member name="P:WampSharp.V2.PubSub.IWampTopic.SubscriptionId">
            <summary>
            Gets the subscription id associated with this subscription.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.IWampTopicContainer">
            <summary>
            Represents a container for <see cref="T:WampSharp.V2.PubSub.IWampTopic"/>s of a given realm.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.Subscribe(WampSharp.V2.PubSub.IWampRawTopicRouterSubscriber,System.String,WampSharp.V2.Core.Contracts.SubscribeOptions)">
            <summary>
            Subscribes to a topic given its uri.
            </summary>
            <param name="subscriber">The subscriber to subscribe with.</param>
            <param name="topicUri">The topic uri of the topic to subscribe to.</param>
            <param name="options">The options to subscribe with.</param>
            <returns>A disposable, that will cancel subscription to the topic when disposed.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.Publish``1(WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.PublishOptions,System.String)">
            <summary>
            Publishes to a requestd topic with requested parameters. 
            </summary>
            <param name="formatter">The formatter that this publication can be deserialized with.</param>
            <param name="options">The publication options.</param>
            <param name="topicUri">The topic uri of the topic to publish to.</param>
            <typeparam name="TMessage"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.Publish``1(WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.PublishOptions,System.String,``0[])">
            <summary>
            Publishes to a requestd topic with requested parameters. 
            </summary>
            <param name="formatter">The formatter that this publication can be deserialized with.</param>
            <param name="options">The publication options.</param>
            <param name="topicUri">The topic uri of the topic to publish to.</param>
            <param name="arguments">The published arguments.</param>
            <typeparam name="TMessage"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.Publish``1(WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.PublishOptions,System.String,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Publishes to a requestd topic with requested parameters. 
            </summary>
            <param name="formatter">The formatter that this publication can be deserialized with.</param>
            <param name="options">The publication options.</param>
            <param name="topicUri">The topic uri of the topic to publish to.</param>
            <param name="arguments">The published arguments.</param>
            <param name="argumentKeywords">The published argument keywords.</param>
            <typeparam name="TMessage"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.CreateTopicByUri(System.String,System.Boolean)">
            <summary>
            Creates and adds a topic to the container given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="persistent">A value indicating whether the topic is persistent.</param>
            <returns>The created topic.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.GetOrCreateTopicByUri(System.String)">
            <summary>
            Gets or creates a topic given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <returns>The requested topic.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.GetTopicByUri(System.String)">
            <summary>
            Gets a topic given it uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <returns>The requested topic.</returns>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.TryRemoveTopicByUri(System.String,WampSharp.V2.PubSub.IWampTopic@)">
            <summary>
            Tries to remove a topic given its uri.
            </summary>
            <param name="topicUri">The topic's uri.</param>
            <param name="topic">The removed topic.</param>
            <returns>A value indicating whether the removal succeeded.</returns>
        </member>
        <member name="P:WampSharp.V2.PubSub.IWampTopicContainer.TopicUris">
            <summary>
            Gets the uris of the topics present in the container.
            </summary>
        </member>
        <member name="P:WampSharp.V2.PubSub.IWampTopicContainer.Topics">
            <summary>
            Gets the topics currently present in the container.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.IWampTopicContainer.TopicCreated">
            <summary>
            Occurs when a new topic is created.
            </summary>
        </member>
        <member name="E:WampSharp.V2.PubSub.IWampTopicContainer.TopicRemoved">
            <summary>
            Occurs when a topic is removed.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.GetSubscriptionId(System.String,WampSharp.V2.Core.Contracts.SubscribeOptions)">
            <summary>
            Creates an id for a topic uri based on options.
            </summary>
            <param name="topicUri">The topic uri of the subscription.</param>
            <param name="options">The subscription options.</param>
            <returns>The generated id.</returns>
            <remarks>If you don't know what to do here, use a simple 
            <see cref="T:WampSharp.V2.PubSub.ExactTopicSubscriptionId"/>.</remarks>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampTopicContainer.GetMatchingTopics(System.String)">
            <summary>
            Gets all topics (subscriptions) that match the given criteria.
            </summary>
            <param name="criteria">The given criteria.</param>
            <returns>An enumerable consisting of all topics (subscriptions) 
            that match the given criteria.</returns>
        </member>
        <member name="T:WampSharp.V2.PubSub.IWampRawTopicRouterSubscriber">
            <summary>
            Represents a topic subscriber that lives in the same process as the router.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampRawTopicRouterSubscriber.Event``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.PublishOptions)">
            <summary>
            Occurs when an event arrives.
            </summary>
            <param name="formatter">The formatted this event can be deserialized with.</param>
            <param name="publicationId">The publication id of this event.</param>
            <param name="options">The publication options.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampRawTopicRouterSubscriber.Event``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,``0[])">
            <summary>
            Occurs when an event arrives.
            </summary>
            <param name="formatter">The formatted this event can be deserialized with.</param>
            <param name="publicationId">The publication id of this event.</param>
            <param name="options">The publication options.</param>
            <param name="arguments">The arguments of this event.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.PubSub.IWampRawTopicRouterSubscriber.Event``1(WampSharp.Core.Serialization.IWampFormatter{``0},System.Int64,WampSharp.V2.Core.Contracts.PublishOptions,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Occurs when an event arrives.
            </summary>
            <param name="formatter">The formatted this event can be deserialized with.</param>
            <param name="publicationId">The publication id of this event.</param>
            <param name="options">The publication options.</param>
            <param name="arguments">The arguments of this event.</param>
            <param name="argumentsKeywords">The argument keywords of this event.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.PubSub.MatchTopicContainer.#ctor(WampSharp.V2.Core.WampIdMapper{WampSharp.V2.PubSub.IWampTopic})">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.PubSub.WampTopicContainer"/>.
            </summary>
            <param name="subscriptionIdToTopic"></param>
        </member>
        <member name="T:WampSharp.V2.PubSub.WampTopicAttribute">
            <summary>
            Indicates this event/method represents a WAMPv2 pub/sub topic.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.WampTopicAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.PubSub.WampTopicAttribute"/> given
            the topic uri this event/method is mapped to.
            </summary>
            <param name="topic">The given the topic uri this method/event is mapped to.</param>
        </member>
        <member name="P:WampSharp.V2.PubSub.WampTopicAttribute.Topic">
            <summary>
            Gets the topic uri this method/event is mapped to.
            </summary>
        </member>
        <member name="T:WampSharp.V2.PubSub.WampTopicContainer">
            <summary>
            A default implementation of <see cref="T:WampSharp.V2.PubSub.IWampTopicContainer"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.PubSub.WampTopicContainer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.PubSub.WampTopicContainer"/>.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Realm.IWampHostedRealm">
            <summary>
            Represents a <see cref="T:WampSharp.V2.Realm.IWampRealm"/> which is hosted in a <see cref="T:WampSharp.V2.IWampHost"/>.
            </summary>
        </member>
        <member name="E:WampSharp.V2.Realm.IWampHostedRealm.SessionCreated">
            <summary>
            Occurs when a new session is created.
            </summary>
        </member>
        <member name="E:WampSharp.V2.Realm.IWampHostedRealm.SessionClosed">
            <summary>
            Occurs when a session is closed.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.IWampHostedRealm.Services">
            <summary>
            Gets the services associated with this realm. 
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.IWampHostedRealm.Roles">
            <summary>
            Gets the features enabled for this realm.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.IWampHostedRealm.SessionId">
            <summary>
            Gets the session associated with this hosted realm internal client.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Realm.IWampHostedRealmContainer">
            <summary>
            Represents a container of <see cref="T:WampSharp.V2.Realm.IWampHostedRealm"/>.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Realm.IWampHostedRealmContainer.GetRealmByName(System.String)">
            <summary>
            Gets a realm by its name.
            </summary>
            <param name="name">The requested ream name.</param>
            <returns>The request realm.</returns>
        </member>
        <member name="T:WampSharp.V2.Realm.WampHostedRealm">
            <summary>
            A class used by the <see cref="T:WampSharp.V2.Realm.IWampHostedRealmContainer"/> of
            <see cref="T:WampSharp.V2.WampHostBase"/>. Actually, the user isn't aware about it.
            It mostly adds <see cref="E:WampSharp.V2.Realm.IWampHostedRealm.SessionClosed"/> and
            <see cref="E:WampSharp.V2.Realm.IWampHostedRealm.SessionCreated"/> events.
            This class is wrapped by <see cref="T:WampSharp.V2.WampServiceHostedRealm"/> eventually,
            so the user never calls <see cref="P:WampSharp.V2.Realm.WampHostedRealm.Services"/> and <see cref="P:WampSharp.V2.Realm.WampHostedRealm.SessionId"/>,
            but they shouldn't really be here. But I didn't want to break <see cref="T:WampSharp.V2.Realm.IWampHostedRealm"/>
            and I don't have a good name for an interface having only these events. So it stays this way.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Realm.IWampRealm">
            <summary>
            Represents a WAMP realm. That is a domain, where uris are mapped
            to topics and procedures.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.IWampRealm.Name">
            <summary>
            Gets the realm's name.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.IWampRealm.RpcCatalog">
            <summary>
            Gets the <see cref="T:WampSharp.V2.Rpc.IWampRpcOperationCatalog"/> associated with this realm.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.IWampRealm.TopicContainer">
            <summary>
            Gets the <see cref="T:WampSharp.V2.PubSub.IWampTopicContainer"/> associated with this realm.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Realm.WampSessionCloseEventArgs">
            <summary>
            Represents <see cref="T:System.EventArgs"/> for a session close event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.WampSessionCloseEventArgs.Reason">
            <summary>
            Gets the close reason.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.WampSessionCloseEventArgs.CloseType">
            <summary>
            Gets the close type.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Realm.WampSessionCreatedEventArgs">
            <summary>
            Respresents <see cref="T:System.EventArgs"/> for a WAMP session event.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Realm.WampSessionCreatedEventArgs.SessionId">
            <summary>
            Gets the relevant session id.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Rpc.LocalRpcOperation.CollectionResultTreatment">
            <summary>
            Returns a value indicating whether to treat an ICollection{T} result
            as the arguments yield argument. (If false, treats an ICollection{T} result
            value as a single argument).
            </summary>
        </member>
        <member name="T:WampSharp.V2.Rpc.CollectionResultTreatment">
            <summary>
            Indicates how to treat results of type <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Rpc.CollectionResultTreatment.SingleValue">
            <summary>
            Indicates that result of type <see cref="T:System.Collections.Generic.ICollection`1"/> are treated as
            a single return value.
            </summary>
        </member>
        <member name="F:WampSharp.V2.Rpc.CollectionResultTreatment.Multivalued">
            <summary>
            Indicates that result of type <see cref="T:System.Collections.Generic.ICollection`1"/> are treated as
            a multiple return value - i.e. as the arguments of the result.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback">
            <summary>
            Represents a callback for a WAMP rpc operation that lives in the router.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Rpc.IWampRawRpcOperationClientCallback">
            <summary>
            Represents a callback for a WAMP rpc operation that lives outside the router.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1">
            <summary>
            Represents a callback for a <see cref="T:WampSharp.V2.Rpc.IWampRpcOperation"/>.
            </summary>
            <typeparam name="TDetailsOptions"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1.Result``1(WampSharp.Core.Serialization.IWampFormatter{``0},`0)">
            <summary>
            Occurs when a result has arrived.
            </summary>
            <param name="formatter">The formatter the can be used to deserialize arguments.</param>
            <param name="details">The details associated with this result.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1.Result``1(WampSharp.Core.Serialization.IWampFormatter{``0},`0,``0[])">
            <summary>
            Occurs when a result has arrived.
            </summary>
            <param name="formatter">The formatter the can be used to deserialize arguments.</param>
            <param name="details">The details associated with this result.</param>
            <param name="arguments">The arguments associated with this result.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1.Result``1(WampSharp.Core.Serialization.IWampFormatter{``0},`0,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Occurs when a result has arrived.
            </summary>
            <param name="formatter">The formatter the can be used to deserialize arguments.</param>
            <param name="details">The details associated with this result.</param>
            <param name="arguments">The arguments associated with this result.</param>
            <param name="argumentsKeywords">The arguments keywords associated with this result.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1.Error``1(WampSharp.Core.Serialization.IWampFormatter{``0},``0,System.String)">
            <summary>
            Occurs when an error has occurred.
            </summary>
            <param name="formatter">The formatter that can be used to deserialize arguments.</param>
            <param name="details">The details associated with this error.</param>
            <param name="error">The error uri.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1.Error``1(WampSharp.Core.Serialization.IWampFormatter{``0},``0,System.String,``0[])">
            <summary>
            Occurs when an error has occurred.
            </summary>
            <param name="formatter">The formatter that can be used to deserialize arguments.</param>
            <param name="details">The details associated with this error.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The arguments associated with this error.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRawRpcOperationCallback`1.Error``1(WampSharp.Core.Serialization.IWampFormatter{``0},``0,System.String,``0[],``0)">
            <summary>
            Occurs when an error has occurred.
            </summary>
            <param name="formatter">The formatter that can be used to deserialize arguments.</param>
            <param name="details">The details associated with this error.</param>
            <param name="error">The error uri.</param>
            <param name="arguments">The arguments associated with this error.</param>
            <param name="argumentsKeywords">The arguments keywords associated with this error.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Rpc.IWampRpcOperation">
            <summary>
            Represents a WAMP rpc operation.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Rpc.IWampRpcOperation.Procedure">
            <summary>
            Gets the procedure uri.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperation.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails)">
            <summary>
            Invokes the procedure.
            </summary>
            <param name="caller">The callback to be notified when a result or error arrives.</param>
            <param name="formatter">The formatter that can be used to deserialize call arguments.</param>
            <param name="details">The details of this invocation.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperation.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails,``0[])">
            <summary>
            Invokes the procedure.
            </summary>
            <param name="caller">The callback to be notified when a result or error arrives.</param>
            <param name="formatter">The formatter that can be used to deserialize call arguments.</param>
            <param name="details">The details of this invocation.</param>
            <param name="arguments">The arguments associated with this invocation.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperation.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Invokes the procedure.
            </summary>
            <param name="caller">The callback to be notified when a result or error arrives.</param>
            <param name="formatter">The formatter that can be used to deserialize call arguments.</param>
            <param name="details">The details of this invocation.</param>
            <param name="arguments">The arguments associated with this invocation.</param>
            <param name="argumentsKeywords">The arguments keywords associated with this invocation.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Rpc.IWampRpcOperationCatalog">
            <summary>
            Represents a container for rpc procedures registered in a realm.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperationCatalog.Register(WampSharp.V2.Rpc.IWampRpcOperation,WampSharp.V2.Core.Contracts.RegisterOptions)">
            <summary>
            Registers a <see cref="T:WampSharp.V2.Rpc.IWampRpcOperation"/> to the realm.
            </summary>
            <param name="operation"></param>
            <param name="options"></param>
        </member>
        <member name="E:WampSharp.V2.Rpc.IWampRpcOperationCatalog.RegistrationAdded">
            <summary>
            Occurs when a procedure registration is added.
            </summary>
        </member>
        <member name="E:WampSharp.V2.Rpc.IWampRpcOperationCatalog.RegistrationRemoved">
            <summary>
            Occurs when a procedure registration is removed.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperationCatalog.GetMatchingOperation(System.String)">
            <summary>
            Gets the best match for the given criteria.
            </summary>
            <param name="criteria">The given criteria.</param>
            <returns>The best match for the given criteria.</returns>
        </member>
        <member name="T:WampSharp.V2.Rpc.IWampRpcOperationInvoker">
            <summary>
            Represents a mechanism that can invoke rpc operations.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperationInvoker.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails,System.String)">
            <summary>
            Invokes the request procedure with the given parameters.
            </summary>
            <param name="caller">The callback that will be called when a result or error is available.</param>
            <param name="formatter">A formatter that can be used to deserialize given arguments.</param>
            <param name="details">The details associated with this call.</param>
            <param name="procedure">The procedure to invoke.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperationInvoker.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails,System.String,``0[])">
            <summary>
            Invokes the request procedure with the given parameters.
            </summary>
            <param name="caller">The callback that will be called when a result or error is available.</param>
            <param name="formatter">A formatter that can be used to deserialize given arguments.</param>
            <param name="details">The details associated with this call.</param>
            <param name="procedure">The procedure to invoke.</param>
            <param name="arguments">The arguments associated with this call.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:WampSharp.V2.Rpc.IWampRpcOperationInvoker.Invoke``1(WampSharp.V2.Rpc.IWampRawRpcOperationRouterCallback,WampSharp.Core.Serialization.IWampFormatter{``0},WampSharp.V2.Core.Contracts.InvocationDetails,System.String,``0[],System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Invokes the request procedure with the given parameters.
            </summary>
            <param name="caller">The callback that will be called when a result or error is available.</param>
            <param name="formatter">A formatter that can be used to deserialize given arguments.</param>
            <param name="details">The details associated with this call.</param>
            <param name="procedure">The procedure to invoke.</param>
            <param name="arguments">The arguments associated with this call.</param>
            <param name="argumentsKeywords">The arguments keywords associated with this call.</param>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:WampSharp.V2.Rpc.WampProcedureAttribute">
            <summary>
            Indicates this method respresents a WAMPv2 rpc procedure.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Rpc.WampProcedureAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:WampSharp.V2.Rpc.WampProcedureAttribute"/> given
            the procedure uri this method is mapped to.
            </summary>
            <param name="procedure">The given the procedure uri this method is mapped to.</param>
        </member>
        <member name="P:WampSharp.V2.Rpc.WampProcedureAttribute.Procedure">
            <summary>
            Gets the procedure uri this method is mapped to.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Rpc.WampProgressiveResultProcedureAttribute">
            <summary>
            Indicates that a method returns a progressive result.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Rpc.WampResultAttribute.#ctor(WampSharp.V2.Rpc.CollectionResultTreatment)">
            <summary>
            Creates a new instance of <see cref="T:WampSharp.V2.Rpc.WampResultAttribute"/>.
            </summary>
            <param name="collectionResultTreatment">A value indicating how to treat results of type
            <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="T:WampSharp.V2.ICalleeRegistrationInterceptor">
            <summary>
            Represents an interface that allows to get involved in callee registration.
            </summary>
        </member>
        <member name="M:WampSharp.V2.ICalleeRegistrationInterceptor.IsCalleeProcedure(System.Reflection.MethodInfo)">
            <summary>
            Returns a value indicating whether this method is a callee method.
            </summary>
        </member>
        <member name="M:WampSharp.V2.ICalleeRegistrationInterceptor.GetRegisterOptions(System.Reflection.MethodInfo)">
            <summary>
            Gets the options that will be used to register the given method.
            </summary>
        </member>
        <member name="M:WampSharp.V2.ICalleeRegistrationInterceptor.GetProcedureUri(System.Reflection.MethodInfo)">
            <summary>
            Gets the procedure uri that will be used to register the given method.
            </summary>
        </member>
        <member name="T:WampSharp.V2.Testament.Client.IWampTestamentServiceProxy">
            <summary>
            A proxy for WAMP router testament service.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Testament.Client.IWampTestamentServiceProxy.AddTestament(System.String,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Add a testament to the current session.
            </summary>
            <param name="topic">The topic to publish to.</param>
            <param name="args">Arguments for the publication.</param>
            <param name="kwargs">Keyword arguments for the publication.</param>
        </member>
        <member name="M:WampSharp.V2.Testament.Client.IWampTestamentServiceProxy.AddTestament(System.String,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object},WampSharp.V2.Core.Contracts.PublishOptions)">
            <summary>
            Add a testament to the current session.
            </summary>
            <param name="topic">The topic to publish to.</param>
            <param name="args">Arguments for the publication.</param>
            <param name="kwargs">Keyword arguments for the publication.</param>
            <param name="publish_options">The publish options for the publication.</param>
        </member>
        <member name="M:WampSharp.V2.Testament.Client.IWampTestamentServiceProxy.AddTestament(System.String,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object},WampSharp.V2.Core.Contracts.PublishOptions,System.String)">
            <summary>
            Add a testament to the current session.
            </summary>
            <param name="topic">The topic to publish to.</param>
            <param name="args">Arguments for the publication.</param>
            <param name="kwargs">Keyword arguments for the publication.</param>
            <param name="publish_options">The publish options for the publication.</param>
            <param name="scope">The scope of the testament, either "detatched" or "destroyed".</param>
        </member>
        <member name="M:WampSharp.V2.Testament.Client.IWampTestamentServiceProxy.FlushTestaments">
            <summary>
            Flush the testaments of a given scope.
            </summary>
            <returns>The number of flushed testament events.</returns>
        </member>
        <member name="M:WampSharp.V2.Testament.Client.IWampTestamentServiceProxy.FlushTestaments(System.String)">
            <summary>
            Flush the testaments of a given scope.
            </summary>
            <param name="scope">The scope to flush, either "detatched" or "destroyed".</param>
            <returns>The number of flushed testament events.</returns>
        </member>
        <member name="M:WampSharp.V2.Testament.Client.IWampTestamentServiceProxy.AddTestamentAsync(System.String,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Add a testament to the current session.
            </summary>
            <param name="topic">The topic to publish to.</param>
            <param name="args">Arguments for the publication.</param>
            <param name="kwargs">Keyword arguments for the publication.</param>
        </member>
        <member name="M:WampSharp.V2.Testament.Client.IWampTestamentServiceProxy.AddTestamentAsync(System.String,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object},WampSharp.V2.Core.Contracts.PublishOptions)">
            <summary>
            Add a testament to the current session.
            </summary>
            <param name="topic">The topic to publish to.</param>
            <param name="args">Arguments for the publication.</param>
            <param name="kwargs">Keyword arguments for the publication.</param>
            <param name="publish_options">The publish options for the publication.</param>
        </member>
        <member name="M:WampSharp.V2.Testament.Client.IWampTestamentServiceProxy.AddTestamentAsync(System.String,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object},WampSharp.V2.Core.Contracts.PublishOptions,System.String)">
            <summary>
            Add a testament to the current session.
            </summary>
            <param name="topic">The topic to publish to.</param>
            <param name="args">Arguments for the publication.</param>
            <param name="kwargs">Keyword arguments for the publication.</param>
            <param name="publish_options">The publish options for the publication.</param>
            <param name="scope">The scope of the testament, either "detatched" or "destroyed".</param>
        </member>
        <member name="M:WampSharp.V2.Testament.Client.IWampTestamentServiceProxy.FlushTestamentsAsync">
            <summary>
            Flush the testaments of a given scope.
            </summary>
            <returns>The number of flushed testament events.</returns>
        </member>
        <member name="M:WampSharp.V2.Testament.Client.IWampTestamentServiceProxy.FlushTestamentsAsync(System.String)">
            <summary>
            Flush the testaments of a given scope.
            </summary>
            <param name="scope">The scope to flush, either "detatched" or "destroyed".</param>
            <returns>The number of flushed testament events.</returns>
        </member>
        <member name="M:WampSharp.V2.Testament.IWampTestamentService.AddTestament(System.String,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object},WampSharp.V2.Core.Contracts.PublishOptions,System.String)">
            <summary>
            Add a testament to the current session.
            </summary>
            <param name="topic">The topic to publish to.</param>
            <param name="args">Arguments for the publication.</param>
            <param name="kwargs">Keyword arguments for the publication.</param>
            <param name="publish_options">The publish options for the publication.</param>
            <param name="scope">The scope of the testament, either "detatched" or "destroyed".</param>
        </member>
        <member name="M:WampSharp.V2.Testament.IWampTestamentService.FlushTestaments(System.String)">
            <summary>
            Flush the testaments of a given scope.
            </summary>
            <param name="scope">The scope to flush, either "detatched" or "destroyed".</param>
            <returns>The number of flushed testament events.</returns>
        </member>
        <member name="T:WampSharp.V2.Transports.TextBinaryTransport`1">
            <summary>
            Represents a transport that supports text/binary payloads.
            </summary>
        </member>
        <member name="P:WampSharp.V2.Transports.TextBinaryTransport`1.SubProtocols">
            <summary>
            Gets the subprotocols registered within this transport.
            </summary>
        </member>
        <member name="M:WampSharp.V2.Transports.TextBinaryTransport`1.OnNewConnection(`0)">
            <summary>
            Call this when a new connection is established.
            </summary>
            <param name="connection">The new connection.</param>
        </member>
        <member name="M:WampSharp.V2.Transports.TextBinaryTransport`1.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:WampSharp.V2.Transports.TextBinaryTransport`1.OpenConnection``1(`0,WampSharp.Core.Listener.IWampConnection{``0})">
            <summary>
            Occurs after a WampConnection has been created.
            </summary>
            <remarks>Override this in order to open your connection.</remarks>
        </member>
        <member name="M:WampSharp.V2.Transports.TextBinaryTransport`1.GetSubProtocol(`0)">
            <summary>
            Gets the sub-protocol associated with the given connection.
            </summary>
            <param name="connection">The given connection.</param>
            <returns>The sub-protocol associated with the given connection</returns>
        </member>
        <member name="M:WampSharp.V2.Transports.TextBinaryTransport`1.CreateBinaryConnection``1(`0,WampSharp.V2.Binding.IWampBinaryBinding{``0})">
            <summary>
            Creates a binary <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/> using the given 
            binding and the given connection.
            </summary>
            <param name="connection">The given connection.</param>
            <param name="binding">The given binding.</param>
        </member>
        <member name="M:WampSharp.V2.Transports.TextBinaryTransport`1.CreateTextConnection``1(`0,WampSharp.V2.Binding.IWampTextBinding{``0})">
            <summary>
            Creates a text <see cref="T:WampSharp.Core.Listener.IWampConnection`1"/> using the given 
            binding and the given connection.
            </summary>
            <param name="connection">The given connection.</param>
            <param name="binding">The given binding.</param>
        </member>
        <member name="T:WampSharp.V2.Transports.WebSocketTransport`1">
            <summary>
            Represents a WebSocket transport.
            </summary>
        </member>
        <member name="T:SystemEx.ITaskAsyncDisposable">
            <summary>
            A Task based version of <see cref="T:System.IAsyncDisposable"/>.
            </summary>
        </member>
        <member name="M:SystemEx.ITaskAsyncDisposable.DisposeAsync">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
            <returns>A task that is finished when dispose is done.</returns>
        </member>
    </members>
</doc>
